---
description:
globs:
alwaysApply: true
---
This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

# File Summary

## Purpose
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

## File Format
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A header with the file path (## File: path/to/file)
  b. The full contents of the file in a code block

## Usage Guidelines
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

## Notes
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)

## Additional Info

# Directory Structure
```
.github/
  workflows/
    ci.yml
lib/
  admin.php
  api.php
tests/
  end-to-end/
    admin.spec.ts
    playwright.config.ts
  integration/
    api.spec.ts
  blueprint.json
  playground.ts
.gitignore
.nvmrc
package.json
README.md
vitest.config.ts
wceu-playground-tester.php
```

# Files

## File: .github/workflows/ci.yml
````yaml
name: CI Tests

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run integration tests
      run: npm run test:integration

    - name: Setup Playwright
      run: npx playwright install --with-deps

    - name: Run End-to-End tests
      run: npx playwright test --config=tests/end-to-end/playwright.config.ts
````

## File: lib/admin.php
````php
<?php

namespace WCEUPT;

if (!defined('ABSPATH')) {
    exit;
}

require_once plugin_dir_path(__FILE__) . 'api.php';

function add_admin_menu() {
    add_menu_page(
        'Workshop Tests',
        'Workshop Tests',
        'manage_options',
        'workshop-tests',
        'WCEUPT\admin_page',
        'dashicons-admin-generic',
        30
    );
}
add_action('admin_menu', 'WCEUPT\add_admin_menu');

function admin_page() {
    ?>
    <div class="wrap" style="max-width: 200px; display: flex; flex-direction: column; gap: 10px;">
        <h1><?php echo esc_html(get_admin_page_title()); ?></h1>
        <ul id="api-responses">
            <?php foreach (get_messages() as $message) : ?>
                <li><?php echo esc_html($message); ?></li>
            <?php endforeach; ?>
        </ul>
        <div class="form-wrap">
            <form id="hello-form" class="form-table">
                <div class="form-field" style="display: flex; flex-direction: row; gap: 10px;">
                    <input type="text" id="name" name="name" placeholder="Enter a message" required>
                    <button type="submit" class="button button-primary">Send</button>
                </div>
            </form>
        </div>
    </div>
    <script>
    jQuery(document).ready(function($) {
        $('#hello-form').on('submit', async function(e) {
            e.preventDefault();
            const name = $('#name').val();
            try {
                const formData = new FormData();
                formData.append('name', name);
                const response = await fetch(
                    `<?php echo esc_url_raw(rest_url('wceupt/v1/hello')); ?>`,
                    {
                        method: 'POST',
                        credentials: 'same-origin',
                        headers: {
                            'X-WP-Nonce': '<?php echo wp_create_nonce('wp_rest'); ?>'
                        },
                        body: formData
                    }
                );
                const data = await response.json();
                if (data.success) {
                    $('#api-responses').append(`<li>${data.message}</li>`);
                    $('#name').val('');
                } else {
                    console.error('API request failed:', data.message);
                }
            } catch (error) {
                console.error('API request failed:', error);
            }
        });
    });
    </script>
    <?php
}
````

## File: lib/api.php
````php
<?php

namespace WCEUPT;

if (!defined('ABSPATH')) {
    exit;
}

const OPTIONS_KEY = 'wceupt_messages';

function register_rest_routes() {
    register_rest_route('wceupt/v1', '/hello/', array(
        'methods' => 'POST',
        'callback' => 'WCEUPT\hello_endpoint',
        'permission_callback' => function() {
            return current_user_can('manage_options');
        },
        'args' => array(
            'name' => array(
                'required' => true,
                'sanitize_callback' => 'sanitize_text_field'
            )
        )
    ));
}
add_action('rest_api_init', 'WCEUPT\register_rest_routes');

function hello_endpoint($request) {
    $name = $request->get_param('name');
    $new_message = hello_response_message($name);
    save_message($new_message);
    return array(
        'success' => true,
        'message' => $new_message
    );
}

function hello_response_message($message) {
    return "User says: $message";
}

function get_messages() {
    return get_option(OPTIONS_KEY, array());
}

function save_message($message) {
    $options = get_messages();
    $options[] = $message;
    update_option(OPTIONS_KEY, $options);
}
````

## File: tests/end-to-end/admin.spec.ts
````typescript
import { test, expect } from "@playwright/test";
import { PHPRequestHandler, PHP } from "@php-wasm/universal";
import { runPlayground } from "../playground";

test.describe("Workshop Tests", () => {
  let cliServer: any;
  let handler: PHPRequestHandler;
  let php: PHP;

  test.beforeEach(async () => {
    cliServer = await runPlayground();
    handler = cliServer.requestHandler;
    php = await handler.getPrimaryPhp();
  });

  test.afterEach(async () => {
    if (cliServer) {
      await cliServer.server.close();
    }
  });

  test("Admin page form", async ({ page }) => {
    const wpAdminUrl = new URL(handler.absoluteUrl);
    wpAdminUrl.pathname = "/wp-admin/admin.php";
    wpAdminUrl.searchParams.set("page", "workshop-tests");
    await page.goto(wpAdminUrl.toString());

    await expect(page).toHaveTitle(/Workshop Tests/);

    await page.getByPlaceholder("Enter a message").fill("Hello, world!");
    await page.getByRole("button", { name: "Send" }).click();
    await expect(page.getByText("User says: Hello, world!")).toBeVisible();

    await page.reload();
    await expect(page.getByText("User says: Hello, world!")).toBeVisible();
  });
});
````

## File: tests/end-to-end/playwright.config.ts
````typescript
import { defineConfig, devices } from '@playwright/test';
import path from 'path';

import { fileURLToPath } from 'url';
import { dirname } from 'path';

/**
 * Playground requires __filename and __dirname to be set.
 * This is a workaround to set them correctly.
 */
global.__filename = path.join(fileURLToPath(import.meta.url), '..');
global.__dirname = dirname(__filename);

/**
 * See https://playwright.dev/docs/test-configuration.
 */
export default defineConfig({
  testDir: '.',
  /* Run tests in files in parallel */
  fullyParallel: true,
  /* Fail the build on CI if you accidentally left test.only in the source code. */
  forbidOnly: !!process.env.CI,
  /* Retry on CI only */
  retries: process.env.CI ? 2 : 0,
  /* Opt out of parallel tests on CI. */
  workers: process.env.CI ? 1 : undefined,
  /* Reporter to use. See https://playwright.dev/docs/test-reporters */
  reporter: 'line',
  use: {
    /* Collect trace when retrying the failed test. */
    trace: 'on-first-retry',
  },

  /* Configure projects for major browsers */
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },

    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },

    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
  ]
});
````

## File: tests/integration/api.spec.ts
````typescript
import {
  test,
  expect,
  describe,
  beforeEach,
  afterAll,
  beforeAll,
} from "vitest";
import {
  type PHPRequestHandler,
  type PHP,
  PHPRequest,
} from "@php-wasm/universal";
import { RunCLIServer } from "@wp-playground/cli";
import { runPlayground } from "../playground";

const requestFollowRedirects = async (handler: PHPRequestHandler, request: PHPRequest) => {
  let response = await handler.request(request);
  while ([301, 302].includes(response.httpStatusCode) && response.headers.location && response.headers.location.length > 0) {
    response = await handler.request({
      url: response.headers['location'][0],
    });
  }
  return response;
};

const getRestAuthHeaders = async (handler: PHPRequestHandler, php: PHP) => {
  if (!php.fileExists("/wordpress/get_rest_auth_data.php")) {
    await php.writeFile(
      "/wordpress/get_rest_auth_data.php",
      `<?php
      require_once '/wordpress/wp-load.php';
      $cookieArray = [];
      foreach ($_COOKIE as $key => $value) {
          $cookieArray[] = $key . '=' . urlencode($value);
      }
      echo json_encode(
        array(
          'nonce' => wp_create_nonce('wp_rest'),
          'cookie' => implode('; ', $cookieArray)
        )
      );`
    );
  }
  const nonceResponse = await requestFollowRedirects(handler, { url: "/get_rest_auth_data.php" });
  return {
    "X-WP-Nonce": nonceResponse.json.nonce,
    cookie: nonceResponse.json.cookies,
  };
};

describe("Workshop Tests", () => {
  let cliServer: RunCLIServer;
  let handler: PHPRequestHandler;
  let php: PHP;
  beforeAll(async () => {
    cliServer = await runPlayground();
    handler = cliServer.requestHandler;
    php = await handler.getPrimaryPhp();
  });
  beforeEach(async () => {
    await php.run({
      code: `
        <?php
        require_once '/wordpress/wp-load.php';
        delete_option('wceupt_messages');
      `,
    });
  });
  afterAll(async () => {
    if (cliServer) {
      await cliServer.server.close();
    }
  });
  test("Should activate plugin", async () => {
    const activePlugins = await php.run({
      code: `
        <?php
        require_once '/wordpress/wp-load.php';
        echo json_encode(get_option('active_plugins'));
      `,
    });
    expect(activePlugins.json).toContain(
      "wceu-playground-tester/wceu-playground-tester.php"
    );
  });

  test("Should correctly generate response message", async () => {
    const result = await php.run({
      code: `
        <?php
        require_once '/wordpress/wp-load.php';
        echo json_encode(array(
          'message' => WCEUPT\\hello_response_message('John Doe')
        ));
      `,
    });
    expect(result.json.message).toBe("User says: John Doe");
  });
  test("Should load wp-admin page", async () => {
    const response = await requestFollowRedirects(
      handler,
      {
        url: "/wp-admin/admin.php?page=workshop-tests",
      }
    );
    expect(response.text).toContain("<h1>Workshop Tests</h1>");
  });

  test("Should fail to get API endpoint response for non-logged in user", async () => {
    const response = await requestFollowRedirects(
      handler,
      {
        url: "/wp-json/wceupt/v1/hello",
        method: "POST",
        body: { name: "John Doe" },
      }
    );
    expect(response.httpStatusCode).toBe(401);
  });
  test("Should get API endpoint response for logged in user", async () => {
    const authHeaders = await getRestAuthHeaders(handler, php);
    const apiResponse = await requestFollowRedirects(
      handler,
      {
        url: "/wp-json/wceupt/v1/hello",
        method: "POST",
        headers: authHeaders,
        body: { name: "John Doe" },
      }
    );
    expect(apiResponse.httpStatusCode).toBe(200);
    expect(apiResponse.json.success).toBe(true);
    expect(apiResponse.json.message).toContain("User says: John Doe");
  });

  test("Should fail to get API endpoint response if name is not provided", async () => {
    const authHeaders = await getRestAuthHeaders(handler, php);
    const apiResponse = await requestFollowRedirects(
      handler,
      {
        url: "/wp-json/wceupt/v1/hello",
        method: "POST",
        headers: authHeaders,
      }
    );
    expect(apiResponse.httpStatusCode).toBe(400);
  });

  test("Should sanitize API request input", async () => {
    const authHeaders = await getRestAuthHeaders(handler, php);
    const apiResponse = await requestFollowRedirects(
      handler,
      {
        url: "/wp-json/wceupt/v1/hello",
        method: "POST",
        headers: authHeaders,
        body: { name: '<script>alert("XSS")</script>' },
      }
    );

    expect(apiResponse.httpStatusCode).toBe(200);
    expect(apiResponse.json.success).toBe(true);
    expect(apiResponse.json.message).toBe("User says: ");
  });

  test("Should save message after API request", async () => {
    const authHeaders = await getRestAuthHeaders(handler, php);
    await requestFollowRedirects(handler, {
      url: "/wp-json/wceupt/v1/hello",
      method: "POST",
      headers: authHeaders,
      body: { name: "John Doe" },
    });

    const result = await php.run({
      code: `
        <?php
        require_once '/wordpress/wp-load.php';
        echo json_encode(array(
          'message' => WCEUPT\\get_messages()
        ));
      `,
    });
    expect(result.json.message.length).toBe(1);
    expect(result.json.message[0]).toBe("User says: John Doe");
  });
});
````

## File: tests/blueprint.json
````json
{
    "login": true,
    "steps": [
        {
            "step": "activatePlugin",
            "pluginPath": "/wordpress/wp-content/plugins/wceu-playground-tester"
        }
    ]
}
````

## File: tests/playground.ts
````typescript
import { runCLI } from "@wp-playground/cli";
import { readFile } from "fs/promises";
import path from "path";

export const runPlayground = async () => {
    const blueprint = JSON.parse(
        await readFile(
            path.join(__dirname, "blueprint.json"),
            "utf8"
        )
    );
    return await runCLI({
        command: "server",
        mount: [
            ".:/wordpress/wp-content/plugins/wceu-playground-tester",
        ],
        blueprint,
    });
}
````

## File: .gitignore
````
node_modules/

# Playwright
/test-results/
/playwright-report/
/blob-report/
/playwright/.cache/
.DS_Store

# WordPress
/debug.log
````

## File: .nvmrc
````
v20.9.0
````

## File: package.json
````json
{
  "name": "wceu-playground-tester",
  "version": "1.0.0",
  "description": "This repository contains the code and instructions for the workshop \"Building Automated Tests with WordPress Playground\" for WordCamp EU 2025.",
  "type": "module",
  "scripts": {
    "test": "vitest run && npx playwright test --config=tests/end-to-end/playwright.config.ts",
    "test:integration": "vitest",
    "test:e2e": "npx playwright test --ui --config=tests/end-to-end/playwright.config.ts",
    "server": "npx @wp-playground/cli server --mount=.:/wordpress/wp-content/plugins/wceu-playground-tester --mount=./debug.log:/wordpress/wp-content/debug.log --blueprint=tests/blueprint.json"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@playwright/test": "^1.51.1",
    "@types/node": "^22.14.1",
    "@wp-playground/cli": "^1.0.29",
    "vitest": "^3.1.1"
  }
}
````

## File: README.md
````markdown
# Building Automated Tests with WordPress Playground

This repository contains the code and instructions for the workshop "Building Automated Tests with WordPress Playground" for WordCamp EU 2025.

## Workshop description:

The goal of this workshop is to show how easy it is to start testing WordPress projects and enable participants to implement tests in their own projects.
In the workshop we will write integration and end-to-end tests for a typical WordPress plugin.
We will run tests using WordPress Playground, so they can run inside the WordPress context, each test can run on a differently configured site, and we can test the project using both PHP and HTTP requests.
To start we will fork a plugin from GitHub and learn how to run it locally using the Playground CLI. After that, we will implement integration and end-to-end tests for our plugin using Playground.
Once we have all tests working we will add a GitHub action to run these tests on every commit in GitHub.

If you want to see the final result, you can check the `main` branch, or you can check the `start` branch, which is the starting point for the workshop.

## Requirements:

You will need `Node.js 20` with `npm 5.2.0` or higher on your machine.
It's possible to install it using [nvm (Node Version Manager)](https://github.com/nvm-sh/nvm#installing-and-updating) or install Node.js from [Node.js website](https://nodejs.org/en/download/).

Optionally [Git](https://git-scm.com/downloads), but if you don't want to use Git, you can download the project as a zip file, or from a USB drive that will be provided during the workshop.

## Development setup:

1. Clone the repository:

```bash
git clone -b start https://github.com/bgrgicak/playground-testing-demo
```

2. Setup the Node.js environment:

```bash
nvm install
nvm use
```

3. Install the dependencies:

```bash
npm install
```

3.1 Install Playwright:

```bash
npx playwright install --with-deps
```

4. Run the WordPress site

```bash
npx @wp-playground/cli server --mount=.:/wordpress/wp-content/plugins/
```

5. Run the tests:

```bash
npm run test
```

5.1 Run tests in watch mode:

```bash
npm run test:integration
```

5.3 Run end-to-end tests:

```bash
npm run test:e2e
```


5.2 Run tests in CI mode:

## What are we building?

### Local development server

- [ ] Run the local development server using Playground CLI
  - [ ] Mount the plugin code in the WordPress site
  - [ ] Add support for a debug log file
  - [ ] Configure the WordPress site using a Blueprint

### Integration tests

- [ ] Check if the plugin is active
- [ ] Response message function (`WCEUPT\\hello_response_message`)
- [ ] Check if the `/wp-admin/admin.php?page=workshop-tests` WP-admin page loads
- [ ] Rest API endpoint `/wp-json/wceupt/v1/hello`
  - [ ] Confirm the API endpoint fails when not authenticated
  - [ ] Confirm the API endpoint returns expected response when authenticated
  - [ ] Confirm the API endpoint fails if the `message` argument isn't provided
  - [ ] Confirm the API endpoint sanitizes the `message` argument
  - [ ] Confirm the API endpoint saves the message to the database

### End-to-end tests

- [ ] Admin page
  - [ ] Check if `/wp-admin/admin.php?page=workshop-tests` page loads
  - [ ] Check if the message is displayed after submitting the form
  - [ ] Check if the message is persisted after a page reload

### GitHub Actions

- [ ] Run tests on every commit
````

## File: vitest.config.ts
````typescript
import { defineConfig } from 'vitest/config'

export default defineConfig({
  test: {
    include: ['tests/integration/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
  },
})
````

## File: wceu-playground-tester.php
````php
<?php
/**
 * Plugin Name: Workshop Building Automated Tests with WordPress Playground
 * Description: A simple plugin that adds a Hello World admin page
 * Version: 1.0.0
 * Author: Workshop
 */

namespace WCEUPT;

if (!defined('ABSPATH')) {
    exit;
}

function init() {
    require_once plugin_dir_path(__FILE__) . 'lib/admin.php';
    require_once plugin_dir_path(__FILE__) . 'lib/api.php';
}

add_action('init', 'WCEUPT\init');
````
