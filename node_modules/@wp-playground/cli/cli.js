import n from "fs";
import a from "path";
import u from "yargs";
import { SupportedPHPVersions as l } from "@php-wasm/universal";
import { RecommendedPHPVersion as d } from "@wp-playground/common";
import { runCLI as c } from "./index.js";
import "express";
import "@php-wasm/logger";
import "@wp-playground/blueprints";
import "@php-wasm/progress";
import "@php-wasm/node";
import "@wp-playground/wordpress";
import "tls";
import "fs-extra";
import "os";
function m(e) {
  return /^latest$|^trunk$|^nightly$|^(?:(\d+)\.(\d+)(?:\.(\d+))?)((?:-beta(?:\d+)?)|(?:-RC(?:\d+)?))?$/.test(e);
}
async function f() {
  const e = await u(process.argv.slice(2)).usage("Usage: wp-playground <command> [options]").positional("command", {
    describe: "Command to run",
    type: "string",
    choices: ["server", "run-blueprint", "build-snapshot"]
  }).option("outfile", {
    describe: "When building, write to this output file.",
    type: "string",
    default: "wordpress.zip"
  }).option("port", {
    describe: "Port to listen on when serving.",
    type: "number",
    default: 9400
  }).option("php", {
    describe: "PHP version to use.",
    type: "string",
    default: d,
    choices: l
  }).option("wp", {
    describe: "WordPress version to use.",
    type: "string",
    default: "latest"
  }).option("mount", {
    describe: "Mount a directory to the PHP runtime. You can provide --mount multiple times. Format: /host/path:/vfs/path",
    type: "array",
    string: !0
  }).option("mountBeforeInstall", {
    describe: "Mount a directory to the PHP runtime before installing WordPress. You can provide --mount-before-install multiple times. Format: /host/path:/vfs/path",
    type: "array",
    string: !0
  }).option("login", {
    describe: "Should log the user in",
    type: "boolean",
    default: !1
  }).option("blueprint", {
    describe: "Blueprint to execute.",
    type: "string"
  }).option("skipWordPressSetup", {
    describe: "Do not download, unzip, and install WordPress. Useful for mounting a pre-configured WordPress directory at /wordpress.",
    type: "boolean",
    default: !1
  }).option("quiet", {
    describe: "Do not output logs and progress messages.",
    type: "boolean",
    default: !1
  }).option("debug", {
    describe: "Print PHP error log content if an error occurs during Playground boot.",
    type: "boolean",
    default: !1
  }).showHelpOnFail(!1).check((t) => {
    if (t.wp !== void 0 && !m(t.wp))
      try {
        new URL(t.wp);
      } catch {
        throw new Error(
          'Unrecognized WordPress version. Please use "latest", a URL, or a numeric version such as "6.2", "6.0.1", "6.2-beta1", or "6.2-RC1"'
        );
      }
    if (t.blueprint !== void 0) {
      const r = a.resolve(
        process.cwd(),
        t.blueprint
      );
      if (!n.existsSync(r))
        throw new Error("Blueprint file does not exist");
      const p = n.readFileSync(r, "utf-8");
      try {
        t.blueprint = JSON.parse(p);
      } catch {
        throw new Error("Blueprint file is not a valid JSON file");
      }
    }
    return !0;
  });
  e.wrap(e.terminalWidth());
  const o = await e.argv, i = o._[0];
  ["run-blueprint", "server", "build-snapshot"].includes(i) || (e.showHelp(), process.exit(1));
  const s = {
    ...o,
    command: i
  };
  return await c(s);
}
f();
//# sourceMappingURL=cli.js.map
