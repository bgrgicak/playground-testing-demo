{"version":3,"file":"run-cli-BSw9FKSW.cjs","sources":["../../../../packages/playground/cli/src/cli-auto-mount.ts","../../../../packages/playground/cli/src/download.ts","../../../../packages/playground/cli/src/server.ts","../../../../packages/playground/cli/src/mount.ts","../../../../packages/playground/cli/src/run-cli.ts"],"sourcesContent":["import { basename, join } from 'path';\nimport type {\n\tBlueprintDeclaration,\n\tStepDefinition,\n} from '@wp-playground/blueprints';\nimport fs from 'fs';\nimport type { RunCLIArgs } from './run-cli';\nimport type { Mount } from './mount';\n\nexport function expandAutoMounts(args: RunCLIArgs): RunCLIArgs {\n\tconst path = process.cwd();\n\n\tconst mount = [...(args.mount || [])];\n\tconst mountBeforeInstall = [...(args.mountBeforeInstall || [])];\n\n\tif (isPluginDirectory(path)) {\n\t\tconst pluginName = basename(path);\n\t\tmount.push({\n\t\t\thostPath: path,\n\t\t\tvfsPath: `/wordpress/wp-content/plugins/${pluginName}`,\n\t\t});\n\t} else if (isThemeDirectory(path)) {\n\t\tconst themeName = basename(path);\n\t\tmount.push({\n\t\t\thostPath: path,\n\t\t\tvfsPath: `/wordpress/wp-content/themes/${themeName}`,\n\t\t});\n\t} else if (containsWpContentDirectories(path)) {\n\t\tmount.push(...wpContentMounts(path));\n\t} else if (containsFullWordPressInstallation(path)) {\n\t\t/**\n\t\t * We don't want Playground and WordPress to modify the OS filesystem on their own\n\t\t * by creating files like wp-config.php or wp-content/db.php.\n\t\t * To ensure WordPress can write to the /wordpress/ and /wordpress/wp-content/ directories,\n\t\t * we leave these directories as MEMFS nodes and mount individual files\n\t\t * and directories into them instead of mounting the entire directory as a NODEFS node.\n\t\t */\n\t\tconst files = fs.readdirSync(path);\n\t\tconst mounts: Mount[] = [];\n\t\tfor (const file of files) {\n\t\t\tif (file.startsWith('wp-content')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmounts.push({\n\t\t\t\thostPath: `${path}/${file}`,\n\t\t\t\tvfsPath: `/wordpress/${file}`,\n\t\t\t});\n\t\t}\n\t\tmountBeforeInstall.push(\n\t\t\t...mounts,\n\t\t\t...wpContentMounts(join(path, 'wp-content'))\n\t\t);\n\t} else {\n\t\t/**\n\t\t * By default, mount the current working directory as the Playground root.\n\t\t * This allows users to run and PHP or HTML files using the Playground CLI.\n\t\t */\n\t\tmount.push({ hostPath: path, vfsPath: '/wordpress' });\n\t}\n\n\tconst blueprint = (args.blueprint as BlueprintDeclaration) || {};\n\tblueprint.steps = [...(blueprint.steps || []), ...getSteps(path)];\n\n\t/**\n\t * If Playground is mounting a full WordPress directory,\n\t * it doesn't need to setup WordPress.\n\t */\n\tconst skipWordPressSetup =\n\t\targs.skipWordPressSetup || containsFullWordPressInstallation(path);\n\n\treturn {\n\t\t...args,\n\t\tblueprint,\n\t\tmount,\n\t\tmountBeforeInstall,\n\t\tskipWordPressSetup,\n\t} as RunCLIArgs;\n}\n\nexport function containsFullWordPressInstallation(path: string): boolean {\n\tconst files = fs.readdirSync(path);\n\treturn (\n\t\tfiles.includes('wp-admin') &&\n\t\tfiles.includes('wp-includes') &&\n\t\tfiles.includes('wp-content')\n\t);\n}\n\nexport function containsWpContentDirectories(path: string): boolean {\n\tconst files = fs.readdirSync(path);\n\treturn (\n\t\tfiles.includes('themes') ||\n\t\tfiles.includes('plugins') ||\n\t\tfiles.includes('mu-plugins') ||\n\t\tfiles.includes('uploads')\n\t);\n}\n\nexport function isThemeDirectory(path: string): boolean {\n\tconst files = fs.readdirSync(path);\n\tif (!files.includes('style.css')) {\n\t\treturn false;\n\t}\n\tconst styleCssContent = fs.readFileSync(join(path, 'style.css'), 'utf8');\n\tconst themeNameRegex = /^(?:[ \\t]*<\\?php)?[ \\t/*#@]*Theme Name:(.*)$/im;\n\treturn !!themeNameRegex.exec(styleCssContent);\n}\n\nexport function isPluginDirectory(path: string): boolean {\n\tconst files = fs.readdirSync(path);\n\tconst pluginNameRegex = /^(?:[ \\t]*<\\?php)?[ \\t/*#@]*Plugin Name:(.*)$/im;\n\tconst pluginNameMatch = files\n\t\t.filter((file) => file.endsWith('.php'))\n\t\t.find((file) => {\n\t\t\tconst fileContent = fs.readFileSync(join(path, file), 'utf8');\n\t\t\treturn !!pluginNameRegex.exec(fileContent);\n\t\t});\n\treturn !!pluginNameMatch;\n}\n\n/**\n * Returns a list of files and directories in the wp-content directory\n * to be mounted individually.\n *\n * This is needed because WordPress needs to be able to write to the\n * wp-content directory without Playground modifying the OS filesystem.\n *\n * See expandAutoMounts for more details.\n */\nexport function wpContentMounts(wpContentDir: string): Mount[] {\n\tconst files = fs.readdirSync(wpContentDir);\n\treturn (\n\t\tfiles\n\t\t\t/**\n\t\t\t * index.php is added by WordPress automatically and\n\t\t\t * can't be mounted from the current working directory\n\t\t\t * because it already exists.\n\t\t\t *\n\t\t\t * Because index.php should be empty, it's safe to not include it.\n\t\t\t */\n\t\t\t.filter((file) => !file.startsWith('index.php'))\n\t\t\t.map((file) => ({\n\t\t\t\thostPath: `${wpContentDir}/${file}`,\n\t\t\t\tvfsPath: `/wordpress/wp-content/${file}`,\n\t\t\t}))\n\t);\n}\n\nexport function getSteps(path: string): StepDefinition[] {\n\tif (isPluginDirectory(path)) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tstep: 'activatePlugin',\n\t\t\t\tpluginPath: `/wordpress/wp-content/plugins/${basename(path)}`,\n\t\t\t},\n\t\t];\n\t} else if (isThemeDirectory(path)) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tstep: 'activateTheme',\n\t\t\t\tthemeFolderName: basename(path),\n\t\t\t},\n\t\t];\n\t} else if (\n\t\tcontainsWpContentDirectories(path) ||\n\t\tcontainsFullWordPressInstallation(path)\n\t) {\n\t\t/**\n\t\t * Playground needs to ensure there is an active theme.\n\t\t * Otherwise when WordPress loads it will show a white screen.\n\t\t */\n\t\treturn [\n\t\t\t{\n\t\t\t\tstep: 'runPHP',\n\t\t\t\tcode: `<?php\n\t\t\t\t\trequire_once '/wordpress/wp-load.php';\n\t\t\t\t\t$theme = wp_get_theme();\n\t\t\t\t\tif (!$theme->exists()) {\n\t\t\t\t\t\t$themes = wp_get_themes();\n\t\t\t\t\t\tif (count($themes) > 0) {\n\t\t\t\t\t\t\t$themeName = array_keys($themes)[0];\n\t\t\t\t\t\t\tswitch_theme($themeName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t},\n\t\t];\n\t}\n\treturn [];\n}\n","import type { EmscriptenDownloadMonitor } from '@php-wasm/progress';\nimport fs from 'fs-extra';\nimport os from 'os';\nimport path, { basename } from 'path';\n\nexport const CACHE_FOLDER = path.join(os.homedir(), '.wordpress-playground');\n\nexport async function fetchSqliteIntegration(\n\tmonitor: EmscriptenDownloadMonitor\n) {\n\tconst sqliteZip = await cachedDownload(\n\t\t'https://github.com/WordPress/sqlite-database-integration/archive/refs/heads/develop.zip',\n\t\t'sqlite.zip',\n\t\tmonitor\n\t);\n\treturn sqliteZip;\n}\n\n// @TODO: Support HTTP cache, invalidate the local file if the remote file has\n// changed\nexport async function cachedDownload(\n\tremoteUrl: string,\n\tcacheKey: string,\n\tmonitor: EmscriptenDownloadMonitor\n) {\n\tconst artifactPath = path.join(CACHE_FOLDER, cacheKey);\n\tif (!fs.existsSync(artifactPath)) {\n\t\tfs.ensureDirSync(CACHE_FOLDER);\n\t\tawait downloadTo(remoteUrl, artifactPath, monitor);\n\t}\n\treturn readAsFile(artifactPath);\n}\n\nasync function downloadTo(\n\tremoteUrl: string,\n\tlocalPath: string,\n\tmonitor: EmscriptenDownloadMonitor\n) {\n\tconst response = await monitor.monitorFetch(fetch(remoteUrl));\n\tconst reader = response.body!.getReader();\n\tconst tmpPath = `${localPath}.partial`;\n\tconst writer = fs.createWriteStream(tmpPath);\n\twhile (true) {\n\t\tconst { done, value } = await reader.read();\n\t\tif (value) {\n\t\t\twriter.write(value);\n\t\t}\n\t\tif (done) {\n\t\t\tbreak;\n\t\t}\n\t}\n\twriter.close();\n\tif (!writer.closed) {\n\t\tawait new Promise((resolve, reject) => {\n\t\t\twriter.on('finish', () => {\n\t\t\t\tfs.renameSync(tmpPath, localPath);\n\t\t\t\tresolve(null);\n\t\t\t});\n\t\t\twriter.on('error', (err: any) => {\n\t\t\t\tfs.removeSync(tmpPath);\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t}\n}\n\nexport function readAsFile(path: string, fileName?: string): File {\n\treturn new File([fs.readFileSync(path)], fileName ?? basename(path));\n}\n","import type { PHPRequest, PHPResponse } from '@php-wasm/universal';\nimport type { Request } from 'express';\nimport express from 'express';\nimport type { IncomingMessage, Server, ServerResponse } from 'http';\nimport type { AddressInfo } from 'net';\nimport type { RunCLIServer } from './run-cli';\n\nexport interface ServerOptions {\n\tport: number;\n\tonBind: (server: Server, port: number) => Promise<RunCLIServer>;\n\thandleRequest: (request: PHPRequest) => Promise<PHPResponse>;\n}\n\nexport async function startServer(\n\toptions: ServerOptions\n): Promise<RunCLIServer> {\n\tconst app = express();\n\n\tconst server = await new Promise<\n\t\tServer<typeof IncomingMessage, typeof ServerResponse>\n\t>((resolve, reject) => {\n\t\tconst server = app.listen(options.port, () => {\n\t\t\tconst address = server.address();\n\t\t\tif (address === null || typeof address === 'string') {\n\t\t\t\treject(new Error('Server address is not available'));\n\t\t\t} else {\n\t\t\t\tresolve(server);\n\t\t\t}\n\t\t});\n\t});\n\n\tapp.use('/', async (req, res) => {\n\t\tconst phpResponse = await options.handleRequest({\n\t\t\turl: req.url,\n\t\t\theaders: parseHeaders(req),\n\t\t\tmethod: req.method as any,\n\t\t\tbody: await bufferRequestBody(req),\n\t\t});\n\n\t\tres.statusCode = phpResponse.httpStatusCode;\n\t\tfor (const key in phpResponse.headers) {\n\t\t\tres.setHeader(key, phpResponse.headers[key]);\n\t\t}\n\t\tres.end(phpResponse.bytes);\n\t});\n\n\tconst address = server.address();\n\tconst port = (address! as AddressInfo).port;\n\treturn await options.onBind(server, port);\n}\n\nconst bufferRequestBody = async (req: Request): Promise<Uint8Array> =>\n\tawait new Promise((resolve) => {\n\t\tconst body: Uint8Array[] = [];\n\t\treq.on('data', (chunk) => {\n\t\t\tbody.push(chunk);\n\t\t});\n\t\treq.on('end', () => {\n\t\t\tresolve(new Uint8Array(Buffer.concat(body)));\n\t\t});\n\t});\n\nconst parseHeaders = (req: Request): Record<string, string> => {\n\tconst requestHeaders: Record<string, string> = {};\n\tif (req.rawHeaders && req.rawHeaders.length) {\n\t\tfor (let i = 0; i < req.rawHeaders.length; i += 2) {\n\t\t\trequestHeaders[req.rawHeaders[i].toLowerCase()] =\n\t\t\t\treq.rawHeaders[i + 1];\n\t\t}\n\t}\n\treturn requestHeaders;\n};\n","import { existsSync } from 'fs';\nimport path from 'path';\nimport { createNodeFsMountHandler } from '@php-wasm/node';\nimport type { PHP } from '@php-wasm/universal';\n\nexport interface Mount {\n\thostPath: string;\n\tvfsPath: string;\n}\n\n/**\n * Parse an array of mount argument strings where the host path and VFS path\n * are separated by a colon.\n * \n * Example:\n *     parseMountWithDelimiterArguments( [ '/host/path:/vfs/path', '/host/path:/vfs/path' ] )\n *     // returns:\n *     [ \n *         { hostPath: '/host/path', vfsPath: '/vfs/path' },\n *         { hostPath: '/host/path', vfsPath: '/vfs/path' }\n *     ]\n *\n * @param mounts - An array of mount argument strings separated by a colon.\n * @returns An array of Mount objects.\n */\nexport function parseMountWithDelimiterArguments(mounts: string[]): Mount[] {\n\tconst parsedMounts = [];\n\tfor (const mount of mounts) {\n\t\tconst mountParts = mount.split(':');\n\t\tif (mountParts.length !== 2) {\n\t\t\tthrow new Error(`Invalid mount format: ${mount}.\n\t\t\t\tExpected format: /host/path:/vfs/path.\n\t\t\t\tIf your path contains a colon, e.g. C:\\\\myplugin, use the --mount-dir option instead.\n\t\t\t\tExample: --mount-dir C:\\\\my-plugin /wordpress/wp-content/plugins/my-plugin`);\n\t\t}\n\t\tconst [hostPath, vfsPath] = mountParts;\n\t\tif (!existsSync(hostPath)) {\n\t\t\tthrow new Error(`Host path does not exist: ${hostPath}`);\n\t\t}\n\t\tparsedMounts.push({ hostPath, vfsPath });\n\t}\n\treturn parsedMounts;\n}\n\n/**\n * Parse an array of mount argument strings where each odd array element is a host path\n * and each even element is the VFS path.\n * e.g. [ '/host/path', '/vfs/path', '/host/path2', '/vfs/path2' ]\n *\n * The result will be an array of Mount objects for each host path the\n * following element is it's VFS path.\n * e.g. [\n *   { hostPath: '/host/path', vfsPath: '/vfs/path' },\n *   { hostPath: '/host/path2', vfsPath: '/vfs/path2' }\n * ]\n *\n * @param mounts - An array of paths\n * @returns An array of Mount objects.\n */\nexport function parseMountDirArguments(mounts: string[]): Mount[] {\n\tif (mounts.length % 2 !== 0) {\n\t\tthrow new Error('Invalid mount format. Expected: /host/path /vfs/path');\n\t}\n\n\tconst parsedMounts = [];\n\tfor (let i = 0; i < mounts.length; i += 2) {\n\t\tconst source = mounts[i];\n\t\tconst vfsPath = mounts[i + 1];\n\t\tif (!existsSync(source)) {\n\t\t\tthrow new Error(`Host path does not exist: ${source}`);\n\t\t}\n\t\tparsedMounts.push({\n\t\t\thostPath: path.resolve(process.cwd(), source),\n\t\t\tvfsPath,\n\t\t});\n\t}\n\treturn parsedMounts;\n}\n\nexport function mountResources(php: PHP, mounts: Mount[]) {\n\tfor (const mount of mounts) {\n\t\tphp.mkdir(mount.vfsPath);\n\t\tphp.mount(mount.vfsPath, createNodeFsMountHandler(mount.hostPath));\n\t}\n}\n","import { errorLogPath, logger } from '@php-wasm/logger';\nimport { loadNodeRuntime } from '@php-wasm/node';\nimport { EmscriptenDownloadMonitor, ProgressTracker } from '@php-wasm/progress';\nimport type {\n\tPHPRequest,\n\tPHPRequestHandler,\n\tSupportedPHPVersion,\n} from '@php-wasm/universal';\nimport { PHPResponse } from '@php-wasm/universal';\nimport type {\n\tBlueprintDeclaration,\n\tBlueprintBundle,\n} from '@wp-playground/blueprints';\nimport {\n\tcompileBlueprint,\n\trunBlueprintSteps,\n\tisBlueprintBundle,\n} from '@wp-playground/blueprints';\nimport { RecommendedPHPVersion, zipDirectory } from '@wp-playground/common';\nimport {\n\tbootWordPress,\n\tresolveWordPressRelease,\n} from '@wp-playground/wordpress';\nimport fs from 'fs';\nimport type { Server } from 'http';\nimport path from 'path';\nimport { rootCertificates } from 'tls';\nimport { expandAutoMounts } from './cli-auto-mount';\nimport {\n\tCACHE_FOLDER,\n\tcachedDownload,\n\tfetchSqliteIntegration,\n\treadAsFile,\n} from './download';\nimport { startServer } from './server';\nimport { type Mount, mountResources } from './mount';\n\nexport interface RunCLIArgs {\n\tblueprint?: BlueprintDeclaration | BlueprintBundle;\n\tcommand: 'server' | 'run-blueprint' | 'build-snapshot';\n\tdebug?: boolean;\n\tlogin?: boolean;\n\tmount?: Mount[];\n\tmountBeforeInstall?: Mount[];\n\toutfile?: string;\n\tphp?: SupportedPHPVersion;\n\tport?: number;\n\tquiet?: boolean;\n\tskipWordPressSetup?: boolean;\n\tskipSqliteSetup?: boolean;\n\twp?: string;\n\tautoMount?: boolean;\n\tfollowSymlinks?: boolean;\n}\n\nexport interface RunCLIServer {\n\trequestHandler: PHPRequestHandler;\n\tserver: Server;\n}\n\nexport async function runCLI(args: RunCLIArgs): Promise<RunCLIServer> {\n\t/**\n\t * Expand auto-mounts to include the necessary mounts and steps\n\t * when running in auto-mount mode.\n\t */\n\tif (args.autoMount) {\n\t\targs = expandAutoMounts(args);\n\t}\n\n\t/**\n\t * TODO: This exact feature will be provided in the PHP Blueprints library.\n\t *       Let's use it when it ships. Let's also use it in the web Playground\n\t *       app.\n\t */\n\tasync function zipSite(outfile: string) {\n\t\t// Fake URL for the build\n\t\tconst { php, reap } =\n\t\t\tawait requestHandler.processManager.acquirePHPInstance();\n\t\ttry {\n\t\t\tawait php.run({\n\t\t\t\tcode: `<?php\n\t\t\t\t$zip = new ZipArchive();\n\t\t\t\tif(false === $zip->open('/tmp/build.zip', ZipArchive::CREATE | ZipArchive::OVERWRITE)) {\n\t\t\t\t\tthrow new Exception('Failed to create ZIP');\n\t\t\t\t}\n\t\t\t\t$files = new RecursiveIteratorIterator(\n\t\t\t\t\tnew RecursiveDirectoryIterator('/wordpress')\n\t\t\t\t);\n\t\t\t\tforeach ($files as $file) {\n\t\t\t\t\techo $file . PHP_EOL;\n\t\t\t\t\tif (!$file->isFile()) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$zip->addFile($file->getPathname(), $file->getPathname());\n\t\t\t\t}\n\t\t\t\t$zip->close();\n\n\t\t\t`,\n\t\t\t});\n\t\t\tconst zip = php.readFileAsBuffer('/tmp/build.zip');\n\t\t\tfs.writeFileSync(outfile, zip);\n\t\t} finally {\n\t\t\treap();\n\t\t}\n\t}\n\n\tasync function compileInputBlueprint() {\n\t\t/**\n\t\t * @TODO This looks similar to the resolveBlueprint() call in the website package:\n\t\t * \t     https://github.com/WordPress/wordpress-playground/blob/ce586059e5885d185376184fdd2f52335cca32b0/packages/playground/website/src/main.tsx#L41\n\t\t *\n\t\t * \t\t Also the Blueprint Builder tool does something similar.\n\t\t *       Perhaps all these cases could be handled by the same function?\n\t\t */\n\t\tconst blueprint: BlueprintDeclaration | BlueprintBundle =\n\t\t\tisBlueprintBundle(args.blueprint)\n\t\t\t\t? args.blueprint\n\t\t\t\t: {\n\t\t\t\t\t\tlogin: args.login,\n\t\t\t\t\t\t...args.blueprint,\n\t\t\t\t\t\tpreferredVersions: {\n\t\t\t\t\t\t\tphp:\n\t\t\t\t\t\t\t\targs.php ??\n\t\t\t\t\t\t\t\targs?.blueprint?.preferredVersions?.php ??\n\t\t\t\t\t\t\t\tRecommendedPHPVersion,\n\t\t\t\t\t\t\twp:\n\t\t\t\t\t\t\t\targs.wp ??\n\t\t\t\t\t\t\t\targs?.blueprint?.preferredVersions?.wp ??\n\t\t\t\t\t\t\t\t'latest',\n\t\t\t\t\t\t\t...(args.blueprint?.preferredVersions || {}),\n\t\t\t\t\t\t},\n\t\t\t\t  };\n\n\t\tconst tracker = new ProgressTracker();\n\t\tlet lastCaption = '';\n\t\tlet progressReached100 = false;\n\t\ttracker.addEventListener('progress', (e: any) => {\n\t\t\tif (progressReached100) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprogressReached100 = e.detail.progress === 100;\n\n\t\t\t// Use floor() so we don't report 100% until truly there.\n\t\t\tconst progressInteger = Math.floor(e.detail.progress);\n\t\t\tlastCaption =\n\t\t\t\te.detail.caption || lastCaption || 'Running the Blueprint';\n\t\t\tconst message = `${lastCaption.trim()} – ${progressInteger}%`;\n\t\t\tif (!args.quiet) {\n\t\t\t\twriteProgressUpdate(\n\t\t\t\t\tprocess.stdout,\n\t\t\t\t\tmessage,\n\t\t\t\t\tprogressReached100\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\treturn await compileBlueprint(blueprint as BlueprintDeclaration, {\n\t\t\tprogress: tracker,\n\t\t});\n\t}\n\n\tlet lastProgressMessage = '';\n\tfunction writeProgressUpdate(\n\t\twriteStream: NodeJS.WriteStream,\n\t\tmessage: string,\n\t\tfinalUpdate: boolean\n\t) {\n\t\tif (message === lastProgressMessage) {\n\t\t\t// Avoid repeating the same message\n\t\t\treturn;\n\t\t}\n\t\tlastProgressMessage = message;\n\n\t\tif (writeStream.isTTY) {\n\t\t\t// Overwrite previous progress updates in-place for a quieter UX.\n\t\t\twriteStream.cursorTo(0);\n\t\t\twriteStream.write(message);\n\t\t\twriteStream.clearLine(1);\n\n\t\t\tif (finalUpdate) {\n\t\t\t\twriteStream.write('\\n');\n\t\t\t}\n\t\t} else {\n\t\t\t// Fall back to writing one line per progress update\n\t\t\twriteStream.write(`${message}\\n`);\n\t\t}\n\t}\n\n\tif (args.quiet) {\n\t\t// @ts-ignore\n\t\tlogger.handlers = [];\n\t}\n\n\tconst compiledBlueprint = await compileInputBlueprint();\n\n\tlet requestHandler: PHPRequestHandler;\n\tlet wordPressReady = false;\n\n\tlogger.log('Starting a PHP server...');\n\n\treturn startServer({\n\t\tport: args['port'] as number,\n\t\tonBind: async (server: Server, port: number): Promise<RunCLIServer> => {\n\t\t\tconst absoluteUrl = `http://127.0.0.1:${port}`;\n\n\t\t\tlogger.log(`Setting up WordPress ${args.wp}`);\n\t\t\tlet wpDetails: any = undefined;\n\t\t\t// @TODO: Rename to FetchProgressMonitor. There's nothing Emscripten\n\t\t\t// about that class anymore.\n\t\t\tconst monitor = new EmscriptenDownloadMonitor();\n\t\t\tif (!args.skipWordPressSetup) {\n\t\t\t\tlet progressReached100 = false;\n\t\t\t\tmonitor.addEventListener('progress', ((\n\t\t\t\t\te: CustomEvent<ProgressEvent & { finished: boolean }>\n\t\t\t\t) => {\n\t\t\t\t\tif (progressReached100) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// @TODO Every progress bar will want percentages. The\n\t\t\t\t\t//       download monitor should just provide that.\n\t\t\t\t\tconst { loaded, total } = e.detail;\n\t\t\t\t\t// Use floor() so we don't report 100% until truly there.\n\t\t\t\t\tconst percentProgress = Math.floor(\n\t\t\t\t\t\tMath.min(100, (100 * loaded) / total)\n\t\t\t\t\t);\n\t\t\t\t\tprogressReached100 = percentProgress === 100;\n\n\t\t\t\t\tif (!args.quiet) {\n\t\t\t\t\t\twriteProgressUpdate(\n\t\t\t\t\t\t\tprocess.stdout,\n\t\t\t\t\t\t\t`Downloading WordPress ${percentProgress}%...`,\n\t\t\t\t\t\t\tprogressReached100\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}) as any);\n\n\t\t\t\twpDetails = await resolveWordPressRelease(args.wp);\n\t\t\t}\n\t\t\tlogger.log(\n\t\t\t\t`Resolved WordPress release URL: ${wpDetails?.releaseUrl}`\n\t\t\t);\n\n\t\t\tconst preinstalledWpContentPath =\n\t\t\t\twpDetails &&\n\t\t\t\tpath.join(\n\t\t\t\t\tCACHE_FOLDER,\n\t\t\t\t\t`prebuilt-wp-content-for-wp-${wpDetails.version}.zip`\n\t\t\t\t);\n\t\t\tconst wordPressZip = !wpDetails\n\t\t\t\t? undefined\n\t\t\t\t: fs.existsSync(preinstalledWpContentPath)\n\t\t\t\t? readAsFile(preinstalledWpContentPath)\n\t\t\t\t: await cachedDownload(\n\t\t\t\t\t\twpDetails.releaseUrl,\n\t\t\t\t\t\t`${wpDetails.version}.zip`,\n\t\t\t\t\t\tmonitor\n\t\t\t\t  );\n\n\t\t\tconst constants: Record<string, string | number | boolean | null> =\n\t\t\t\t{\n\t\t\t\t\tWP_DEBUG: true,\n\t\t\t\t\tWP_DEBUG_LOG: true,\n\t\t\t\t\tWP_DEBUG_DISPLAY: false,\n\t\t\t\t};\n\n\t\t\tlogger.log(`Booting WordPress...`);\n\t\t\trequestHandler = await bootWordPress({\n\t\t\t\tsiteUrl: absoluteUrl,\n\t\t\t\tcreatePhpRuntime: async () =>\n\t\t\t\t\tawait loadNodeRuntime(compiledBlueprint.versions.php, {\n\t\t\t\t\t\tfollowSymlinks: args.followSymlinks === true,\n\t\t\t\t\t}),\n\t\t\t\twordPressZip,\n\t\t\t\tsqliteIntegrationPluginZip: args.skipSqliteSetup\n\t\t\t\t\t? undefined\n\t\t\t\t\t: fetchSqliteIntegration(monitor),\n\t\t\t\tsapiName: 'cli',\n\t\t\t\tcreateFiles: {\n\t\t\t\t\t'/internal/shared/ca-bundle.crt':\n\t\t\t\t\t\trootCertificates.join('\\n'),\n\t\t\t\t},\n\t\t\t\tconstants,\n\t\t\t\tphpIniEntries: {\n\t\t\t\t\t'openssl.cafile': '/internal/shared/ca-bundle.crt',\n\t\t\t\t\tallow_url_fopen: '1',\n\t\t\t\t\tdisable_functions: '',\n\t\t\t\t},\n\t\t\t\thooks: {\n\t\t\t\t\tasync beforeWordPressFiles(php) {\n\t\t\t\t\t\tif (args.mountBeforeInstall) {\n\t\t\t\t\t\t\tmountResources(php, args.mountBeforeInstall);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tcookieStore: false,\n\t\t\t});\n\t\t\tlogger.log(`Booted!`);\n\n\t\t\tconst php = await requestHandler.getPrimaryPhp();\n\t\t\ttry {\n\t\t\t\tif (\n\t\t\t\t\twpDetails &&\n\t\t\t\t\t!args.mountBeforeInstall &&\n\t\t\t\t\t!fs.existsSync(preinstalledWpContentPath)\n\t\t\t\t) {\n\t\t\t\t\tlogger.log(\n\t\t\t\t\t\t`Caching preinstalled WordPress for the next boot...`\n\t\t\t\t\t);\n\t\t\t\t\tfs.writeFileSync(\n\t\t\t\t\t\tpreinstalledWpContentPath,\n\t\t\t\t\t\tawait zipDirectory(php, '/wordpress')\n\t\t\t\t\t);\n\t\t\t\t\tlogger.log(`Cached!`);\n\t\t\t\t}\n\n\t\t\t\tif (args.mount) {\n\t\t\t\t\tmountResources(php, args.mount);\n\t\t\t\t}\n\n\t\t\t\twordPressReady = true;\n\n\t\t\t\tif (compiledBlueprint) {\n\t\t\t\t\tconst { php, reap } =\n\t\t\t\t\t\tawait requestHandler.processManager.acquirePHPInstance();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlogger.log(`Running the Blueprint...`);\n\t\t\t\t\t\tawait runBlueprintSteps(compiledBlueprint, php);\n\t\t\t\t\t\tlogger.log(`Finished running the blueprint`);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\treap();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (args.command === 'build-snapshot') {\n\t\t\t\t\tawait zipSite(args.outfile as string);\n\t\t\t\t\tlogger.log(`WordPress exported to ${args.outfile}`);\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t} else if (args.command === 'run-blueprint') {\n\t\t\t\t\tlogger.log(`Blueprint executed`);\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.log(`WordPress is running on ${absoluteUrl}`);\n\t\t\t\t}\n\n\t\t\t\treturn { requestHandler, server };\n\t\t\t} catch (error) {\n\t\t\t\tif (!args.debug) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tconst phpLogs = php.readFileAsText(errorLogPath);\n\t\t\t\tthrow new Error(phpLogs, { cause: error });\n\t\t\t}\n\t\t},\n\t\tasync handleRequest(request: PHPRequest) {\n\t\t\tif (!wordPressReady) {\n\t\t\t\treturn PHPResponse.forHttpCode(\n\t\t\t\t\t502,\n\t\t\t\t\t'WordPress is not ready yet'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn await requestHandler.request(request);\n\t\t},\n\t});\n}\n"],"names":["expandAutoMounts","args","path","mount","mountBeforeInstall","isPluginDirectory","pluginName","basename","isThemeDirectory","themeName","containsWpContentDirectories","wpContentMounts","containsFullWordPressInstallation","files","fs","mounts","file","join","blueprint","getSteps","skipWordPressSetup","styleCssContent","pluginNameRegex","fileContent","wpContentDir","CACHE_FOLDER","os","fetchSqliteIntegration","monitor","cachedDownload","remoteUrl","cacheKey","artifactPath","downloadTo","readAsFile","localPath","reader","tmpPath","writer","done","value","resolve","reject","err","fileName","startServer","options","app","express","server","address","req","res","phpResponse","parseHeaders","bufferRequestBody","key","port","body","chunk","requestHeaders","i","parseMountWithDelimiterArguments","parsedMounts","mountParts","hostPath","vfsPath","existsSync","parseMountDirArguments","source","mountResources","php","createNodeFsMountHandler","runCLI","zipSite","outfile","reap","requestHandler","zip","compileInputBlueprint","isBlueprintBundle","RecommendedPHPVersion","tracker","ProgressTracker","lastCaption","progressReached100","e","progressInteger","message","writeProgressUpdate","compileBlueprint","lastProgressMessage","writeStream","finalUpdate","logger","compiledBlueprint","wordPressReady","absoluteUrl","wpDetails","EmscriptenDownloadMonitor","loaded","total","percentProgress","resolveWordPressRelease","preinstalledWpContentPath","wordPressZip","constants","bootWordPress","loadNodeRuntime","rootCertificates","zipDirectory","runBlueprintSteps","error","phpLogs","errorLogPath","request","PHPResponse"],"mappings":"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"}