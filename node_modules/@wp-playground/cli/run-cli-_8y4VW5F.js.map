{"version":3,"file":"run-cli-_8y4VW5F.js","sources":["../../../../packages/playground/cli/src/cli-auto-mount.ts","../../../../packages/playground/cli/src/download.ts","../../../../packages/playground/cli/src/server.ts","../../../../packages/playground/cli/src/mount.ts","../../../../packages/playground/cli/src/run-cli.ts"],"sourcesContent":["import { basename, join } from 'path';\nimport type {\n\tBlueprintDeclaration,\n\tStepDefinition,\n} from '@wp-playground/blueprints';\nimport fs from 'fs';\nimport type { RunCLIArgs } from './run-cli';\nimport type { Mount } from './mount';\n\nexport function expandAutoMounts(args: RunCLIArgs): RunCLIArgs {\n\tconst path = process.cwd();\n\n\tconst mount = [...(args.mount || [])];\n\tconst mountBeforeInstall = [...(args.mountBeforeInstall || [])];\n\n\tif (isPluginDirectory(path)) {\n\t\tconst pluginName = basename(path);\n\t\tmount.push({\n\t\t\thostPath: path,\n\t\t\tvfsPath: `/wordpress/wp-content/plugins/${pluginName}`,\n\t\t});\n\t} else if (isThemeDirectory(path)) {\n\t\tconst themeName = basename(path);\n\t\tmount.push({\n\t\t\thostPath: path,\n\t\t\tvfsPath: `/wordpress/wp-content/themes/${themeName}`,\n\t\t});\n\t} else if (containsWpContentDirectories(path)) {\n\t\tmount.push(...wpContentMounts(path));\n\t} else if (containsFullWordPressInstallation(path)) {\n\t\t/**\n\t\t * We don't want Playground and WordPress to modify the OS filesystem on their own\n\t\t * by creating files like wp-config.php or wp-content/db.php.\n\t\t * To ensure WordPress can write to the /wordpress/ and /wordpress/wp-content/ directories,\n\t\t * we leave these directories as MEMFS nodes and mount individual files\n\t\t * and directories into them instead of mounting the entire directory as a NODEFS node.\n\t\t */\n\t\tconst files = fs.readdirSync(path);\n\t\tconst mounts: Mount[] = [];\n\t\tfor (const file of files) {\n\t\t\tif (file.startsWith('wp-content')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmounts.push({\n\t\t\t\thostPath: `${path}/${file}`,\n\t\t\t\tvfsPath: `/wordpress/${file}`,\n\t\t\t});\n\t\t}\n\t\tmountBeforeInstall.push(\n\t\t\t...mounts,\n\t\t\t...wpContentMounts(join(path, 'wp-content'))\n\t\t);\n\t} else {\n\t\t/**\n\t\t * By default, mount the current working directory as the Playground root.\n\t\t * This allows users to run and PHP or HTML files using the Playground CLI.\n\t\t */\n\t\tmount.push({ hostPath: path, vfsPath: '/wordpress' });\n\t}\n\n\tconst blueprint = (args.blueprint as BlueprintDeclaration) || {};\n\tblueprint.steps = [...(blueprint.steps || []), ...getSteps(path)];\n\n\t/**\n\t * If Playground is mounting a full WordPress directory,\n\t * it doesn't need to setup WordPress.\n\t */\n\tconst skipWordPressSetup =\n\t\targs.skipWordPressSetup || containsFullWordPressInstallation(path);\n\n\treturn {\n\t\t...args,\n\t\tblueprint,\n\t\tmount,\n\t\tmountBeforeInstall,\n\t\tskipWordPressSetup,\n\t} as RunCLIArgs;\n}\n\nexport function containsFullWordPressInstallation(path: string): boolean {\n\tconst files = fs.readdirSync(path);\n\treturn (\n\t\tfiles.includes('wp-admin') &&\n\t\tfiles.includes('wp-includes') &&\n\t\tfiles.includes('wp-content')\n\t);\n}\n\nexport function containsWpContentDirectories(path: string): boolean {\n\tconst files = fs.readdirSync(path);\n\treturn (\n\t\tfiles.includes('themes') ||\n\t\tfiles.includes('plugins') ||\n\t\tfiles.includes('mu-plugins') ||\n\t\tfiles.includes('uploads')\n\t);\n}\n\nexport function isThemeDirectory(path: string): boolean {\n\tconst files = fs.readdirSync(path);\n\tif (!files.includes('style.css')) {\n\t\treturn false;\n\t}\n\tconst styleCssContent = fs.readFileSync(join(path, 'style.css'), 'utf8');\n\tconst themeNameRegex = /^(?:[ \\t]*<\\?php)?[ \\t/*#@]*Theme Name:(.*)$/im;\n\treturn !!themeNameRegex.exec(styleCssContent);\n}\n\nexport function isPluginDirectory(path: string): boolean {\n\tconst files = fs.readdirSync(path);\n\tconst pluginNameRegex = /^(?:[ \\t]*<\\?php)?[ \\t/*#@]*Plugin Name:(.*)$/im;\n\tconst pluginNameMatch = files\n\t\t.filter((file) => file.endsWith('.php'))\n\t\t.find((file) => {\n\t\t\tconst fileContent = fs.readFileSync(join(path, file), 'utf8');\n\t\t\treturn !!pluginNameRegex.exec(fileContent);\n\t\t});\n\treturn !!pluginNameMatch;\n}\n\n/**\n * Returns a list of files and directories in the wp-content directory\n * to be mounted individually.\n *\n * This is needed because WordPress needs to be able to write to the\n * wp-content directory without Playground modifying the OS filesystem.\n *\n * See expandAutoMounts for more details.\n */\nexport function wpContentMounts(wpContentDir: string): Mount[] {\n\tconst files = fs.readdirSync(wpContentDir);\n\treturn (\n\t\tfiles\n\t\t\t/**\n\t\t\t * index.php is added by WordPress automatically and\n\t\t\t * can't be mounted from the current working directory\n\t\t\t * because it already exists.\n\t\t\t *\n\t\t\t * Because index.php should be empty, it's safe to not include it.\n\t\t\t */\n\t\t\t.filter((file) => !file.startsWith('index.php'))\n\t\t\t.map((file) => ({\n\t\t\t\thostPath: `${wpContentDir}/${file}`,\n\t\t\t\tvfsPath: `/wordpress/wp-content/${file}`,\n\t\t\t}))\n\t);\n}\n\nexport function getSteps(path: string): StepDefinition[] {\n\tif (isPluginDirectory(path)) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tstep: 'activatePlugin',\n\t\t\t\tpluginPath: `/wordpress/wp-content/plugins/${basename(path)}`,\n\t\t\t},\n\t\t];\n\t} else if (isThemeDirectory(path)) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tstep: 'activateTheme',\n\t\t\t\tthemeFolderName: basename(path),\n\t\t\t},\n\t\t];\n\t} else if (\n\t\tcontainsWpContentDirectories(path) ||\n\t\tcontainsFullWordPressInstallation(path)\n\t) {\n\t\t/**\n\t\t * Playground needs to ensure there is an active theme.\n\t\t * Otherwise when WordPress loads it will show a white screen.\n\t\t */\n\t\treturn [\n\t\t\t{\n\t\t\t\tstep: 'runPHP',\n\t\t\t\tcode: `<?php\n\t\t\t\t\trequire_once '/wordpress/wp-load.php';\n\t\t\t\t\t$theme = wp_get_theme();\n\t\t\t\t\tif (!$theme->exists()) {\n\t\t\t\t\t\t$themes = wp_get_themes();\n\t\t\t\t\t\tif (count($themes) > 0) {\n\t\t\t\t\t\t\t$themeName = array_keys($themes)[0];\n\t\t\t\t\t\t\tswitch_theme($themeName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t},\n\t\t];\n\t}\n\treturn [];\n}\n","import type { EmscriptenDownloadMonitor } from '@php-wasm/progress';\nimport fs from 'fs-extra';\nimport os from 'os';\nimport path, { basename } from 'path';\n\nexport const CACHE_FOLDER = path.join(os.homedir(), '.wordpress-playground');\n\nexport async function fetchSqliteIntegration(\n\tmonitor: EmscriptenDownloadMonitor\n) {\n\tconst sqliteZip = await cachedDownload(\n\t\t'https://github.com/WordPress/sqlite-database-integration/archive/refs/heads/develop.zip',\n\t\t'sqlite.zip',\n\t\tmonitor\n\t);\n\treturn sqliteZip;\n}\n\n// @TODO: Support HTTP cache, invalidate the local file if the remote file has\n// changed\nexport async function cachedDownload(\n\tremoteUrl: string,\n\tcacheKey: string,\n\tmonitor: EmscriptenDownloadMonitor\n) {\n\tconst artifactPath = path.join(CACHE_FOLDER, cacheKey);\n\tif (!fs.existsSync(artifactPath)) {\n\t\tfs.ensureDirSync(CACHE_FOLDER);\n\t\tawait downloadTo(remoteUrl, artifactPath, monitor);\n\t}\n\treturn readAsFile(artifactPath);\n}\n\nasync function downloadTo(\n\tremoteUrl: string,\n\tlocalPath: string,\n\tmonitor: EmscriptenDownloadMonitor\n) {\n\tconst response = await monitor.monitorFetch(fetch(remoteUrl));\n\tconst reader = response.body!.getReader();\n\tconst tmpPath = `${localPath}.partial`;\n\tconst writer = fs.createWriteStream(tmpPath);\n\twhile (true) {\n\t\tconst { done, value } = await reader.read();\n\t\tif (value) {\n\t\t\twriter.write(value);\n\t\t}\n\t\tif (done) {\n\t\t\tbreak;\n\t\t}\n\t}\n\twriter.close();\n\tif (!writer.closed) {\n\t\tawait new Promise((resolve, reject) => {\n\t\t\twriter.on('finish', () => {\n\t\t\t\tfs.renameSync(tmpPath, localPath);\n\t\t\t\tresolve(null);\n\t\t\t});\n\t\t\twriter.on('error', (err: any) => {\n\t\t\t\tfs.removeSync(tmpPath);\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t}\n}\n\nexport function readAsFile(path: string, fileName?: string): File {\n\treturn new File([fs.readFileSync(path)], fileName ?? basename(path));\n}\n","import type { PHPRequest, PHPResponse } from '@php-wasm/universal';\nimport type { Request } from 'express';\nimport express from 'express';\nimport type { IncomingMessage, Server, ServerResponse } from 'http';\nimport type { AddressInfo } from 'net';\nimport type { RunCLIServer } from './run-cli';\n\nexport interface ServerOptions {\n\tport: number;\n\tonBind: (server: Server, port: number) => Promise<RunCLIServer>;\n\thandleRequest: (request: PHPRequest) => Promise<PHPResponse>;\n}\n\nexport async function startServer(\n\toptions: ServerOptions\n): Promise<RunCLIServer> {\n\tconst app = express();\n\n\tconst server = await new Promise<\n\t\tServer<typeof IncomingMessage, typeof ServerResponse>\n\t>((resolve, reject) => {\n\t\tconst server = app.listen(options.port, () => {\n\t\t\tconst address = server.address();\n\t\t\tif (address === null || typeof address === 'string') {\n\t\t\t\treject(new Error('Server address is not available'));\n\t\t\t} else {\n\t\t\t\tresolve(server);\n\t\t\t}\n\t\t});\n\t});\n\n\tapp.use('/', async (req, res) => {\n\t\tconst phpResponse = await options.handleRequest({\n\t\t\turl: req.url,\n\t\t\theaders: parseHeaders(req),\n\t\t\tmethod: req.method as any,\n\t\t\tbody: await bufferRequestBody(req),\n\t\t});\n\n\t\tres.statusCode = phpResponse.httpStatusCode;\n\t\tfor (const key in phpResponse.headers) {\n\t\t\tres.setHeader(key, phpResponse.headers[key]);\n\t\t}\n\t\tres.end(phpResponse.bytes);\n\t});\n\n\tconst address = server.address();\n\tconst port = (address! as AddressInfo).port;\n\treturn await options.onBind(server, port);\n}\n\nconst bufferRequestBody = async (req: Request): Promise<Uint8Array> =>\n\tawait new Promise((resolve) => {\n\t\tconst body: Uint8Array[] = [];\n\t\treq.on('data', (chunk) => {\n\t\t\tbody.push(chunk);\n\t\t});\n\t\treq.on('end', () => {\n\t\t\tresolve(new Uint8Array(Buffer.concat(body)));\n\t\t});\n\t});\n\nconst parseHeaders = (req: Request): Record<string, string> => {\n\tconst requestHeaders: Record<string, string> = {};\n\tif (req.rawHeaders && req.rawHeaders.length) {\n\t\tfor (let i = 0; i < req.rawHeaders.length; i += 2) {\n\t\t\trequestHeaders[req.rawHeaders[i].toLowerCase()] =\n\t\t\t\treq.rawHeaders[i + 1];\n\t\t}\n\t}\n\treturn requestHeaders;\n};\n","import { existsSync } from 'fs';\nimport path from 'path';\nimport { createNodeFsMountHandler } from '@php-wasm/node';\nimport type { PHP } from '@php-wasm/universal';\n\nexport interface Mount {\n\thostPath: string;\n\tvfsPath: string;\n}\n\n/**\n * Parse an array of mount argument strings where the host path and VFS path\n * are separated by a colon.\n * \n * Example:\n *     parseMountWithDelimiterArguments( [ '/host/path:/vfs/path', '/host/path:/vfs/path' ] )\n *     // returns:\n *     [ \n *         { hostPath: '/host/path', vfsPath: '/vfs/path' },\n *         { hostPath: '/host/path', vfsPath: '/vfs/path' }\n *     ]\n *\n * @param mounts - An array of mount argument strings separated by a colon.\n * @returns An array of Mount objects.\n */\nexport function parseMountWithDelimiterArguments(mounts: string[]): Mount[] {\n\tconst parsedMounts = [];\n\tfor (const mount of mounts) {\n\t\tconst mountParts = mount.split(':');\n\t\tif (mountParts.length !== 2) {\n\t\t\tthrow new Error(`Invalid mount format: ${mount}.\n\t\t\t\tExpected format: /host/path:/vfs/path.\n\t\t\t\tIf your path contains a colon, e.g. C:\\\\myplugin, use the --mount-dir option instead.\n\t\t\t\tExample: --mount-dir C:\\\\my-plugin /wordpress/wp-content/plugins/my-plugin`);\n\t\t}\n\t\tconst [hostPath, vfsPath] = mountParts;\n\t\tif (!existsSync(hostPath)) {\n\t\t\tthrow new Error(`Host path does not exist: ${hostPath}`);\n\t\t}\n\t\tparsedMounts.push({ hostPath, vfsPath });\n\t}\n\treturn parsedMounts;\n}\n\n/**\n * Parse an array of mount argument strings where each odd array element is a host path\n * and each even element is the VFS path.\n * e.g. [ '/host/path', '/vfs/path', '/host/path2', '/vfs/path2' ]\n *\n * The result will be an array of Mount objects for each host path the\n * following element is it's VFS path.\n * e.g. [\n *   { hostPath: '/host/path', vfsPath: '/vfs/path' },\n *   { hostPath: '/host/path2', vfsPath: '/vfs/path2' }\n * ]\n *\n * @param mounts - An array of paths\n * @returns An array of Mount objects.\n */\nexport function parseMountDirArguments(mounts: string[]): Mount[] {\n\tif (mounts.length % 2 !== 0) {\n\t\tthrow new Error('Invalid mount format. Expected: /host/path /vfs/path');\n\t}\n\n\tconst parsedMounts = [];\n\tfor (let i = 0; i < mounts.length; i += 2) {\n\t\tconst source = mounts[i];\n\t\tconst vfsPath = mounts[i + 1];\n\t\tif (!existsSync(source)) {\n\t\t\tthrow new Error(`Host path does not exist: ${source}`);\n\t\t}\n\t\tparsedMounts.push({\n\t\t\thostPath: path.resolve(process.cwd(), source),\n\t\t\tvfsPath,\n\t\t});\n\t}\n\treturn parsedMounts;\n}\n\nexport function mountResources(php: PHP, mounts: Mount[]) {\n\tfor (const mount of mounts) {\n\t\tphp.mkdir(mount.vfsPath);\n\t\tphp.mount(mount.vfsPath, createNodeFsMountHandler(mount.hostPath));\n\t}\n}\n","import { errorLogPath, logger } from '@php-wasm/logger';\nimport { loadNodeRuntime } from '@php-wasm/node';\nimport { EmscriptenDownloadMonitor, ProgressTracker } from '@php-wasm/progress';\nimport type {\n\tPHPRequest,\n\tPHPRequestHandler,\n\tSupportedPHPVersion,\n} from '@php-wasm/universal';\nimport { PHPResponse } from '@php-wasm/universal';\nimport type {\n\tBlueprintDeclaration,\n\tBlueprintBundle,\n} from '@wp-playground/blueprints';\nimport {\n\tcompileBlueprint,\n\trunBlueprintSteps,\n\tisBlueprintBundle,\n} from '@wp-playground/blueprints';\nimport { RecommendedPHPVersion, zipDirectory } from '@wp-playground/common';\nimport {\n\tbootWordPress,\n\tresolveWordPressRelease,\n} from '@wp-playground/wordpress';\nimport fs from 'fs';\nimport type { Server } from 'http';\nimport path from 'path';\nimport { rootCertificates } from 'tls';\nimport { expandAutoMounts } from './cli-auto-mount';\nimport {\n\tCACHE_FOLDER,\n\tcachedDownload,\n\tfetchSqliteIntegration,\n\treadAsFile,\n} from './download';\nimport { startServer } from './server';\nimport { type Mount, mountResources } from './mount';\n\nexport interface RunCLIArgs {\n\tblueprint?: BlueprintDeclaration | BlueprintBundle;\n\tcommand: 'server' | 'run-blueprint' | 'build-snapshot';\n\tdebug?: boolean;\n\tlogin?: boolean;\n\tmount?: Mount[];\n\tmountBeforeInstall?: Mount[];\n\toutfile?: string;\n\tphp?: SupportedPHPVersion;\n\tport?: number;\n\tquiet?: boolean;\n\tskipWordPressSetup?: boolean;\n\tskipSqliteSetup?: boolean;\n\twp?: string;\n\tautoMount?: boolean;\n\tfollowSymlinks?: boolean;\n}\n\nexport interface RunCLIServer {\n\trequestHandler: PHPRequestHandler;\n\tserver: Server;\n}\n\nexport async function runCLI(args: RunCLIArgs): Promise<RunCLIServer> {\n\t/**\n\t * Expand auto-mounts to include the necessary mounts and steps\n\t * when running in auto-mount mode.\n\t */\n\tif (args.autoMount) {\n\t\targs = expandAutoMounts(args);\n\t}\n\n\t/**\n\t * TODO: This exact feature will be provided in the PHP Blueprints library.\n\t *       Let's use it when it ships. Let's also use it in the web Playground\n\t *       app.\n\t */\n\tasync function zipSite(outfile: string) {\n\t\t// Fake URL for the build\n\t\tconst { php, reap } =\n\t\t\tawait requestHandler.processManager.acquirePHPInstance();\n\t\ttry {\n\t\t\tawait php.run({\n\t\t\t\tcode: `<?php\n\t\t\t\t$zip = new ZipArchive();\n\t\t\t\tif(false === $zip->open('/tmp/build.zip', ZipArchive::CREATE | ZipArchive::OVERWRITE)) {\n\t\t\t\t\tthrow new Exception('Failed to create ZIP');\n\t\t\t\t}\n\t\t\t\t$files = new RecursiveIteratorIterator(\n\t\t\t\t\tnew RecursiveDirectoryIterator('/wordpress')\n\t\t\t\t);\n\t\t\t\tforeach ($files as $file) {\n\t\t\t\t\techo $file . PHP_EOL;\n\t\t\t\t\tif (!$file->isFile()) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$zip->addFile($file->getPathname(), $file->getPathname());\n\t\t\t\t}\n\t\t\t\t$zip->close();\n\n\t\t\t`,\n\t\t\t});\n\t\t\tconst zip = php.readFileAsBuffer('/tmp/build.zip');\n\t\t\tfs.writeFileSync(outfile, zip);\n\t\t} finally {\n\t\t\treap();\n\t\t}\n\t}\n\n\tasync function compileInputBlueprint() {\n\t\t/**\n\t\t * @TODO This looks similar to the resolveBlueprint() call in the website package:\n\t\t * \t     https://github.com/WordPress/wordpress-playground/blob/ce586059e5885d185376184fdd2f52335cca32b0/packages/playground/website/src/main.tsx#L41\n\t\t *\n\t\t * \t\t Also the Blueprint Builder tool does something similar.\n\t\t *       Perhaps all these cases could be handled by the same function?\n\t\t */\n\t\tconst blueprint: BlueprintDeclaration | BlueprintBundle =\n\t\t\tisBlueprintBundle(args.blueprint)\n\t\t\t\t? args.blueprint\n\t\t\t\t: {\n\t\t\t\t\t\tlogin: args.login,\n\t\t\t\t\t\t...args.blueprint,\n\t\t\t\t\t\tpreferredVersions: {\n\t\t\t\t\t\t\tphp:\n\t\t\t\t\t\t\t\targs.php ??\n\t\t\t\t\t\t\t\targs?.blueprint?.preferredVersions?.php ??\n\t\t\t\t\t\t\t\tRecommendedPHPVersion,\n\t\t\t\t\t\t\twp:\n\t\t\t\t\t\t\t\targs.wp ??\n\t\t\t\t\t\t\t\targs?.blueprint?.preferredVersions?.wp ??\n\t\t\t\t\t\t\t\t'latest',\n\t\t\t\t\t\t\t...(args.blueprint?.preferredVersions || {}),\n\t\t\t\t\t\t},\n\t\t\t\t  };\n\n\t\tconst tracker = new ProgressTracker();\n\t\tlet lastCaption = '';\n\t\tlet progressReached100 = false;\n\t\ttracker.addEventListener('progress', (e: any) => {\n\t\t\tif (progressReached100) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprogressReached100 = e.detail.progress === 100;\n\n\t\t\t// Use floor() so we don't report 100% until truly there.\n\t\t\tconst progressInteger = Math.floor(e.detail.progress);\n\t\t\tlastCaption =\n\t\t\t\te.detail.caption || lastCaption || 'Running the Blueprint';\n\t\t\tconst message = `${lastCaption.trim()} – ${progressInteger}%`;\n\t\t\tif (!args.quiet) {\n\t\t\t\twriteProgressUpdate(\n\t\t\t\t\tprocess.stdout,\n\t\t\t\t\tmessage,\n\t\t\t\t\tprogressReached100\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\treturn await compileBlueprint(blueprint as BlueprintDeclaration, {\n\t\t\tprogress: tracker,\n\t\t});\n\t}\n\n\tlet lastProgressMessage = '';\n\tfunction writeProgressUpdate(\n\t\twriteStream: NodeJS.WriteStream,\n\t\tmessage: string,\n\t\tfinalUpdate: boolean\n\t) {\n\t\tif (message === lastProgressMessage) {\n\t\t\t// Avoid repeating the same message\n\t\t\treturn;\n\t\t}\n\t\tlastProgressMessage = message;\n\n\t\tif (writeStream.isTTY) {\n\t\t\t// Overwrite previous progress updates in-place for a quieter UX.\n\t\t\twriteStream.cursorTo(0);\n\t\t\twriteStream.write(message);\n\t\t\twriteStream.clearLine(1);\n\n\t\t\tif (finalUpdate) {\n\t\t\t\twriteStream.write('\\n');\n\t\t\t}\n\t\t} else {\n\t\t\t// Fall back to writing one line per progress update\n\t\t\twriteStream.write(`${message}\\n`);\n\t\t}\n\t}\n\n\tif (args.quiet) {\n\t\t// @ts-ignore\n\t\tlogger.handlers = [];\n\t}\n\n\tconst compiledBlueprint = await compileInputBlueprint();\n\n\tlet requestHandler: PHPRequestHandler;\n\tlet wordPressReady = false;\n\n\tlogger.log('Starting a PHP server...');\n\n\treturn startServer({\n\t\tport: args['port'] as number,\n\t\tonBind: async (server: Server, port: number): Promise<RunCLIServer> => {\n\t\t\tconst absoluteUrl = `http://127.0.0.1:${port}`;\n\n\t\t\tlogger.log(`Setting up WordPress ${args.wp}`);\n\t\t\tlet wpDetails: any = undefined;\n\t\t\t// @TODO: Rename to FetchProgressMonitor. There's nothing Emscripten\n\t\t\t// about that class anymore.\n\t\t\tconst monitor = new EmscriptenDownloadMonitor();\n\t\t\tif (!args.skipWordPressSetup) {\n\t\t\t\tlet progressReached100 = false;\n\t\t\t\tmonitor.addEventListener('progress', ((\n\t\t\t\t\te: CustomEvent<ProgressEvent & { finished: boolean }>\n\t\t\t\t) => {\n\t\t\t\t\tif (progressReached100) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// @TODO Every progress bar will want percentages. The\n\t\t\t\t\t//       download monitor should just provide that.\n\t\t\t\t\tconst { loaded, total } = e.detail;\n\t\t\t\t\t// Use floor() so we don't report 100% until truly there.\n\t\t\t\t\tconst percentProgress = Math.floor(\n\t\t\t\t\t\tMath.min(100, (100 * loaded) / total)\n\t\t\t\t\t);\n\t\t\t\t\tprogressReached100 = percentProgress === 100;\n\n\t\t\t\t\tif (!args.quiet) {\n\t\t\t\t\t\twriteProgressUpdate(\n\t\t\t\t\t\t\tprocess.stdout,\n\t\t\t\t\t\t\t`Downloading WordPress ${percentProgress}%...`,\n\t\t\t\t\t\t\tprogressReached100\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}) as any);\n\n\t\t\t\twpDetails = await resolveWordPressRelease(args.wp);\n\t\t\t}\n\t\t\tlogger.log(\n\t\t\t\t`Resolved WordPress release URL: ${wpDetails?.releaseUrl}`\n\t\t\t);\n\n\t\t\tconst preinstalledWpContentPath =\n\t\t\t\twpDetails &&\n\t\t\t\tpath.join(\n\t\t\t\t\tCACHE_FOLDER,\n\t\t\t\t\t`prebuilt-wp-content-for-wp-${wpDetails.version}.zip`\n\t\t\t\t);\n\t\t\tconst wordPressZip = !wpDetails\n\t\t\t\t? undefined\n\t\t\t\t: fs.existsSync(preinstalledWpContentPath)\n\t\t\t\t? readAsFile(preinstalledWpContentPath)\n\t\t\t\t: await cachedDownload(\n\t\t\t\t\t\twpDetails.releaseUrl,\n\t\t\t\t\t\t`${wpDetails.version}.zip`,\n\t\t\t\t\t\tmonitor\n\t\t\t\t  );\n\n\t\t\tconst constants: Record<string, string | number | boolean | null> =\n\t\t\t\t{\n\t\t\t\t\tWP_DEBUG: true,\n\t\t\t\t\tWP_DEBUG_LOG: true,\n\t\t\t\t\tWP_DEBUG_DISPLAY: false,\n\t\t\t\t};\n\n\t\t\tlogger.log(`Booting WordPress...`);\n\t\t\trequestHandler = await bootWordPress({\n\t\t\t\tsiteUrl: absoluteUrl,\n\t\t\t\tcreatePhpRuntime: async () =>\n\t\t\t\t\tawait loadNodeRuntime(compiledBlueprint.versions.php, {\n\t\t\t\t\t\tfollowSymlinks: args.followSymlinks === true,\n\t\t\t\t\t}),\n\t\t\t\twordPressZip,\n\t\t\t\tsqliteIntegrationPluginZip: args.skipSqliteSetup\n\t\t\t\t\t? undefined\n\t\t\t\t\t: fetchSqliteIntegration(monitor),\n\t\t\t\tsapiName: 'cli',\n\t\t\t\tcreateFiles: {\n\t\t\t\t\t'/internal/shared/ca-bundle.crt':\n\t\t\t\t\t\trootCertificates.join('\\n'),\n\t\t\t\t},\n\t\t\t\tconstants,\n\t\t\t\tphpIniEntries: {\n\t\t\t\t\t'openssl.cafile': '/internal/shared/ca-bundle.crt',\n\t\t\t\t\tallow_url_fopen: '1',\n\t\t\t\t\tdisable_functions: '',\n\t\t\t\t},\n\t\t\t\thooks: {\n\t\t\t\t\tasync beforeWordPressFiles(php) {\n\t\t\t\t\t\tif (args.mountBeforeInstall) {\n\t\t\t\t\t\t\tmountResources(php, args.mountBeforeInstall);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tcookieStore: false,\n\t\t\t});\n\t\t\tlogger.log(`Booted!`);\n\n\t\t\tconst php = await requestHandler.getPrimaryPhp();\n\t\t\ttry {\n\t\t\t\tif (\n\t\t\t\t\twpDetails &&\n\t\t\t\t\t!args.mountBeforeInstall &&\n\t\t\t\t\t!fs.existsSync(preinstalledWpContentPath)\n\t\t\t\t) {\n\t\t\t\t\tlogger.log(\n\t\t\t\t\t\t`Caching preinstalled WordPress for the next boot...`\n\t\t\t\t\t);\n\t\t\t\t\tfs.writeFileSync(\n\t\t\t\t\t\tpreinstalledWpContentPath,\n\t\t\t\t\t\tawait zipDirectory(php, '/wordpress')\n\t\t\t\t\t);\n\t\t\t\t\tlogger.log(`Cached!`);\n\t\t\t\t}\n\n\t\t\t\tif (args.mount) {\n\t\t\t\t\tmountResources(php, args.mount);\n\t\t\t\t}\n\n\t\t\t\twordPressReady = true;\n\n\t\t\t\tif (compiledBlueprint) {\n\t\t\t\t\tconst { php, reap } =\n\t\t\t\t\t\tawait requestHandler.processManager.acquirePHPInstance();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlogger.log(`Running the Blueprint...`);\n\t\t\t\t\t\tawait runBlueprintSteps(compiledBlueprint, php);\n\t\t\t\t\t\tlogger.log(`Finished running the blueprint`);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\treap();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (args.command === 'build-snapshot') {\n\t\t\t\t\tawait zipSite(args.outfile as string);\n\t\t\t\t\tlogger.log(`WordPress exported to ${args.outfile}`);\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t} else if (args.command === 'run-blueprint') {\n\t\t\t\t\tlogger.log(`Blueprint executed`);\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.log(`WordPress is running on ${absoluteUrl}`);\n\t\t\t\t}\n\n\t\t\t\treturn { requestHandler, server };\n\t\t\t} catch (error) {\n\t\t\t\tif (!args.debug) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tconst phpLogs = php.readFileAsText(errorLogPath);\n\t\t\t\tthrow new Error(phpLogs, { cause: error });\n\t\t\t}\n\t\t},\n\t\tasync handleRequest(request: PHPRequest) {\n\t\t\tif (!wordPressReady) {\n\t\t\t\treturn PHPResponse.forHttpCode(\n\t\t\t\t\t502,\n\t\t\t\t\t'WordPress is not ready yet'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn await requestHandler.request(request);\n\t\t},\n\t});\n}\n"],"names":["expandAutoMounts","args","path","mount","mountBeforeInstall","isPluginDirectory","pluginName","basename","isThemeDirectory","themeName","containsWpContentDirectories","wpContentMounts","containsFullWordPressInstallation","files","fs","mounts","file","join","blueprint","getSteps","skipWordPressSetup","styleCssContent","pluginNameRegex","fileContent","wpContentDir","CACHE_FOLDER","os","fetchSqliteIntegration","monitor","cachedDownload","remoteUrl","cacheKey","artifactPath","downloadTo","readAsFile","localPath","reader","tmpPath","writer","done","value","resolve","reject","err","fileName","startServer","options","app","express","server","address","req","res","phpResponse","parseHeaders","bufferRequestBody","key","port","body","chunk","requestHeaders","i","parseMountWithDelimiterArguments","parsedMounts","mountParts","hostPath","vfsPath","existsSync","parseMountDirArguments","source","mountResources","php","createNodeFsMountHandler","runCLI","zipSite","outfile","reap","requestHandler","zip","compileInputBlueprint","isBlueprintBundle","RecommendedPHPVersion","tracker","ProgressTracker","lastCaption","progressReached100","e","progressInteger","message","writeProgressUpdate","compileBlueprint","lastProgressMessage","writeStream","finalUpdate","logger","compiledBlueprint","wordPressReady","absoluteUrl","wpDetails","EmscriptenDownloadMonitor","loaded","total","percentProgress","resolveWordPressRelease","preinstalledWpContentPath","wordPressZip","constants","bootWordPress","loadNodeRuntime","rootCertificates","zipDirectory","runBlueprintSteps","error","phpLogs","errorLogPath","request","PHPResponse"],"mappings":"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"}