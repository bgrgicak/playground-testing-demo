{"version":3,"file":"index.js","sources":["../../../../packages/playground/cli/src/server.ts","../../../../packages/playground/cli/src/download.ts","../../../../packages/playground/cli/src/run-cli.ts"],"sourcesContent":["import type { PHPRequest, PHPResponse } from '@php-wasm/universal';\nimport type { Request } from 'express';\nimport express from 'express';\nimport type { IncomingMessage, Server, ServerResponse } from 'http';\nimport type { AddressInfo } from 'net';\nimport type { RunCLIServer } from './run-cli';\n\nexport interface ServerOptions {\n\tport: number;\n\tonBind: (server: Server, port: number) => Promise<RunCLIServer>;\n\thandleRequest: (request: PHPRequest) => Promise<PHPResponse>;\n}\n\nexport async function startServer(\n\toptions: ServerOptions\n): Promise<RunCLIServer> {\n\tconst app = express();\n\n\tconst server = await new Promise<\n\t\tServer<typeof IncomingMessage, typeof ServerResponse>\n\t>((resolve, reject) => {\n\t\tconst server = app.listen(options.port, () => {\n\t\t\tconst address = server.address();\n\t\t\tif (address === null || typeof address === 'string') {\n\t\t\t\treject(new Error('Server address is not available'));\n\t\t\t} else {\n\t\t\t\tresolve(server);\n\t\t\t}\n\t\t});\n\t});\n\n\tapp.use('/', async (req, res) => {\n\t\tconst phpResponse = await options.handleRequest({\n\t\t\turl: req.url,\n\t\t\theaders: parseHeaders(req),\n\t\t\tmethod: req.method as any,\n\t\t\tbody: await bufferRequestBody(req),\n\t\t});\n\n\t\tres.statusCode = phpResponse.httpStatusCode;\n\t\tfor (const key in phpResponse.headers) {\n\t\t\tres.setHeader(key, phpResponse.headers[key]);\n\t\t}\n\t\tres.end(phpResponse.bytes);\n\t});\n\n\tconst address = server.address();\n\tconst port = (address! as AddressInfo).port;\n\treturn await options.onBind(server, port);\n}\n\nconst bufferRequestBody = async (req: Request): Promise<Uint8Array> =>\n\tawait new Promise((resolve) => {\n\t\tconst body: Uint8Array[] = [];\n\t\treq.on('data', (chunk) => {\n\t\t\tbody.push(chunk);\n\t\t});\n\t\treq.on('end', () => {\n\t\t\tresolve(new Uint8Array(Buffer.concat(body)));\n\t\t});\n\t});\n\nconst parseHeaders = (req: Request): Record<string, string> => {\n\tconst requestHeaders: Record<string, string> = {};\n\tif (req.rawHeaders && req.rawHeaders.length) {\n\t\tfor (let i = 0; i < req.rawHeaders.length; i += 2) {\n\t\t\trequestHeaders[req.rawHeaders[i].toLowerCase()] =\n\t\t\t\treq.rawHeaders[i + 1];\n\t\t}\n\t}\n\treturn requestHeaders;\n};\n","import { EmscriptenDownloadMonitor } from '@php-wasm/progress';\nimport fs from 'fs-extra';\nimport os from 'os';\nimport path, { basename } from 'path';\n\nexport const CACHE_FOLDER = path.join(os.homedir(), '.wordpress-playground');\n\nexport async function fetchSqliteIntegration(\n\tmonitor: EmscriptenDownloadMonitor\n) {\n\tconst sqliteZip = await cachedDownload(\n\t\t'https://github.com/WordPress/sqlite-database-integration/archive/refs/heads/main.zip',\n\t\t'sqlite.zip',\n\t\tmonitor\n\t);\n\treturn sqliteZip;\n}\n\n// @TODO: Support HTTP cache, invalidate the local file if the remote file has\n// changed\nexport async function cachedDownload(\n\tremoteUrl: string,\n\tcacheKey: string,\n\tmonitor: EmscriptenDownloadMonitor\n) {\n\tconst artifactPath = path.join(CACHE_FOLDER, cacheKey);\n\tif (!fs.existsSync(artifactPath)) {\n\t\tfs.ensureDirSync(CACHE_FOLDER);\n\t\tawait downloadTo(remoteUrl, artifactPath, monitor);\n\t}\n\treturn readAsFile(artifactPath);\n}\n\nasync function downloadTo(\n\tremoteUrl: string,\n\tlocalPath: string,\n\tmonitor: EmscriptenDownloadMonitor\n) {\n\tconst response = await monitor.monitorFetch(fetch(remoteUrl));\n\tconst reader = response.body!.getReader();\n\tconst tmpPath = `${localPath}.partial`;\n\tconst writer = fs.createWriteStream(tmpPath);\n\twhile (true) {\n\t\tconst { done, value } = await reader.read();\n\t\tif (value) {\n\t\t\twriter.write(value);\n\t\t}\n\t\tif (done) {\n\t\t\tbreak;\n\t\t}\n\t}\n\twriter.close();\n\tif (!writer.closed) {\n\t\tawait new Promise((resolve, reject) => {\n\t\t\twriter.on('finish', (err: any) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tfs.removeSync(tmpPath);\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tfs.renameSync(tmpPath, localPath);\n\t\t\t\t\tresolve(null);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nexport function readAsFile(path: string, fileName?: string): File {\n\treturn new File([fs.readFileSync(path)], fileName ?? basename(path));\n}\n","import fs from 'fs';\nimport path from 'path';\nimport { startServer } from './server';\nimport {\n\tPHP,\n\tPHPRequest,\n\tPHPRequestHandler,\n\tPHPResponse,\n\tSupportedPHPVersion,\n} from '@php-wasm/universal';\nimport { logger, errorLogPath } from '@php-wasm/logger';\nimport {\n\tBlueprint,\n\tcompileBlueprint,\n\trunBlueprintSteps,\n} from '@wp-playground/blueprints';\nimport type { Server } from 'http';\nimport { EmscriptenDownloadMonitor, ProgressTracker } from '@php-wasm/progress';\nimport { createNodeFsMountHandler, loadNodeRuntime } from '@php-wasm/node';\nimport { RecommendedPHPVersion, zipDirectory } from '@wp-playground/common';\nimport { bootWordPress } from '@wp-playground/wordpress';\nimport { rootCertificates } from 'tls';\nimport {\n\tCACHE_FOLDER,\n\tcachedDownload,\n\tfetchSqliteIntegration,\n\treadAsFile,\n} from './download';\nimport { resolveWordPressRelease } from '@wp-playground/wordpress';\n\nexport interface RunCLIArgs {\n\tblueprint?: Blueprint;\n\tcommand: 'server' | 'run-blueprint' | 'build-snapshot';\n\tdebug?: boolean;\n\tlogin?: boolean;\n\tmount?: string[];\n\tmountBeforeInstall?: string[];\n\toutfile?: string;\n\tphp?: SupportedPHPVersion;\n\tport?: number;\n\tquiet?: boolean;\n\tskipWordPressSetup?: boolean;\n\twp?: string;\n}\n\nexport interface RunCLIServer {\n\trequestHandler: PHPRequestHandler;\n\tserver: Server;\n}\n\nexport interface Mount {\n\thostPath: string;\n\tvfsPath: string;\n}\n\nexport async function runCLI(args: RunCLIArgs): Promise<RunCLIServer> {\n\tif (args.quiet) {\n\t\t// @ts-ignore\n\t\tlogger.handlers = [];\n\t}\n\n\t/**\n\t * TODO: This exact feature will be provided in the PHP Blueprints library.\n\t *       Let's use it when it ships. Let's also use it in the web Playground\n\t *       app.\n\t */\n\tasync function zipSite(outfile: string) {\n\t\t// Fake URL for the build\n\t\tconst { php, reap } =\n\t\t\tawait requestHandler.processManager.acquirePHPInstance();\n\t\ttry {\n\t\t\tawait php.run({\n\t\t\t\tcode: `<?php\n\t\t\t\t$zip = new ZipArchive();\n\t\t\t\tif(false === $zip->open('/tmp/build.zip', ZipArchive::CREATE | ZipArchive::OVERWRITE)) {\n\t\t\t\t\tthrow new Exception('Failed to create ZIP');\n\t\t\t\t}\n\t\t\t\t$files = new RecursiveIteratorIterator(\n\t\t\t\t\tnew RecursiveDirectoryIterator('/wordpress')\n\t\t\t\t);\n\t\t\t\tforeach ($files as $file) {\n\t\t\t\t\techo $file . PHP_EOL;\n\t\t\t\t\tif (!$file->isFile()) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$zip->addFile($file->getPathname(), $file->getPathname());\n\t\t\t\t}\n\t\t\t\t$zip->close();\n\n\t\t\t`,\n\t\t\t});\n\t\t\tconst zip = php.readFileAsBuffer('/tmp/build.zip');\n\t\t\tfs.writeFileSync(outfile, zip);\n\t\t} finally {\n\t\t\treap();\n\t\t}\n\t}\n\n\tfunction mountResources(php: PHP, rawMounts: string[]) {\n\t\tconst parsedMounts = rawMounts.map((mount) => {\n\t\t\tconst [source, vfsPath] = mount.split(':');\n\t\t\treturn {\n\t\t\t\thostPath: path.resolve(process.cwd(), source),\n\t\t\t\tvfsPath,\n\t\t\t};\n\t\t});\n\t\tfor (const mount of parsedMounts) {\n\t\t\tphp.mkdir(mount.vfsPath);\n\t\t\tphp.mount(mount.vfsPath, createNodeFsMountHandler(mount.hostPath));\n\t\t}\n\t}\n\n\tfunction compileInputBlueprint() {\n\t\t/**\n\t\t * @TODO This looks similar to the resolveBlueprint() call in the website package:\n\t\t * \t     https://github.com/WordPress/wordpress-playground/blob/ce586059e5885d185376184fdd2f52335cca32b0/packages/playground/website/src/main.tsx#L41\n\t\t *\n\t\t * \t\t Also the Blueprint Builder tool does something similar.\n\t\t *       Perhaps all these cases could be handled by the same function?\n\t\t */\n\t\tlet blueprint: Blueprint | undefined;\n\t\tif (args.blueprint) {\n\t\t\tblueprint = args.blueprint as Blueprint;\n\t\t} else {\n\t\t\tblueprint = {\n\t\t\t\tpreferredVersions: {\n\t\t\t\t\tphp: args.php ?? RecommendedPHPVersion,\n\t\t\t\t\twp: args.wp ?? 'latest',\n\t\t\t\t},\n\t\t\t\tlogin: args.login,\n\t\t\t};\n\t\t}\n\n\t\tconst tracker = new ProgressTracker();\n\t\tlet lastCaption = '';\n\t\tlet progressReached100 = false;\n\t\ttracker.addEventListener('progress', (e: any) => {\n\t\t\tif (progressReached100) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprogressReached100 = e.detail.progress === 100;\n\n\t\t\t// Use floor() so we don't report 100% until truly there.\n\t\t\tconst progressInteger = Math.floor(e.detail.progress);\n\t\t\tlastCaption =\n\t\t\t\te.detail.caption || lastCaption || 'Running the Blueprint';\n\t\t\tconst message = `${lastCaption.trim()} â€“ ${progressInteger}%`;\n\t\t\tif (!args.quiet) {\n\t\t\t\twriteProgressUpdate(\n\t\t\t\t\tprocess.stdout,\n\t\t\t\t\tmessage,\n\t\t\t\t\tprogressReached100\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\treturn compileBlueprint(blueprint as Blueprint, {\n\t\t\tprogress: tracker,\n\t\t});\n\t}\n\n\tlet lastProgressMessage = '';\n\tfunction writeProgressUpdate(\n\t\twriteStream: NodeJS.WriteStream,\n\t\tmessage: string,\n\t\tfinalUpdate: boolean\n\t) {\n\t\tif (message === lastProgressMessage) {\n\t\t\t// Avoid repeating the same message\n\t\t\treturn;\n\t\t}\n\t\tlastProgressMessage = message;\n\n\t\tif (writeStream.isTTY) {\n\t\t\t// Overwrite previous progress updates in-place for a quieter UX.\n\t\t\twriteStream.cursorTo(0);\n\t\t\twriteStream.write(message);\n\t\t\twriteStream.clearLine(1);\n\n\t\t\tif (finalUpdate) {\n\t\t\t\twriteStream.write('\\n');\n\t\t\t}\n\t\t} else {\n\t\t\t// Fall back to writing one line per progress update\n\t\t\twriteStream.write(`${message}\\n`);\n\t\t}\n\t}\n\n\tconst compiledBlueprint = compileInputBlueprint();\n\n\tlet requestHandler: PHPRequestHandler;\n\tlet wordPressReady = false;\n\n\tlogger.log('Starting a PHP server...');\n\n\treturn startServer({\n\t\tport: args['port'] as number,\n\t\tonBind: async (server: Server, port: number): Promise<RunCLIServer> => {\n\t\t\tconst absoluteUrl = `http://127.0.0.1:${port}`;\n\n\t\t\tlogger.log(`Setting up WordPress ${args.wp}`);\n\t\t\tlet wpDetails: any = undefined;\n\t\t\t// @TODO: Rename to FetchProgressMonitor. There's nothing Emscripten\n\t\t\t// about that class anymore.\n\t\t\tconst monitor = new EmscriptenDownloadMonitor();\n\t\t\tif (!args.skipWordPressSetup) {\n\t\t\t\tlet progressReached100 = false;\n\t\t\t\tmonitor.addEventListener('progress', ((\n\t\t\t\t\te: CustomEvent<ProgressEvent & { finished: boolean }>\n\t\t\t\t) => {\n\t\t\t\t\tif (progressReached100) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// @TODO Every progress bar will want percentages. The\n\t\t\t\t\t//       download monitor should just provide that.\n\t\t\t\t\tconst { loaded, total } = e.detail;\n\t\t\t\t\t// Use floor() so we don't report 100% until truly there.\n\t\t\t\t\tconst percentProgress = Math.floor(\n\t\t\t\t\t\tMath.min(100, (100 * loaded) / total)\n\t\t\t\t\t);\n\t\t\t\t\tprogressReached100 = percentProgress === 100;\n\n\t\t\t\t\tif (!args.quiet) {\n\t\t\t\t\t\twriteProgressUpdate(\n\t\t\t\t\t\t\tprocess.stdout,\n\t\t\t\t\t\t\t`Downloading WordPress ${percentProgress}%...`,\n\t\t\t\t\t\t\tprogressReached100\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}) as any);\n\n\t\t\t\twpDetails = await resolveWordPressRelease(args.wp);\n\t\t\t}\n\t\t\tlogger.log(\n\t\t\t\t`Resolved WordPress release URL: ${wpDetails?.releaseUrl}`\n\t\t\t);\n\n\t\t\tconst preinstalledWpContentPath =\n\t\t\t\twpDetails &&\n\t\t\t\tpath.join(\n\t\t\t\t\tCACHE_FOLDER,\n\t\t\t\t\t`prebuilt-wp-content-for-wp-${wpDetails.version}.zip`\n\t\t\t\t);\n\t\t\tconst wordPressZip = !wpDetails\n\t\t\t\t? undefined\n\t\t\t\t: fs.existsSync(preinstalledWpContentPath)\n\t\t\t\t? readAsFile(preinstalledWpContentPath)\n\t\t\t\t: await cachedDownload(\n\t\t\t\t\t\twpDetails.releaseUrl,\n\t\t\t\t\t\t`${wpDetails.version}.zip`,\n\t\t\t\t\t\tmonitor\n\t\t\t\t  );\n\n\t\t\tconst constants: Record<string, string | number | boolean | null> =\n\t\t\t\t{\n\t\t\t\t\tWP_DEBUG: true,\n\t\t\t\t\tWP_DEBUG_LOG: true,\n\t\t\t\t\tWP_DEBUG_DISPLAY: false,\n\t\t\t\t};\n\n\t\t\tlogger.log(`Booting WordPress...`);\n\t\t\trequestHandler = await bootWordPress({\n\t\t\t\tsiteUrl: absoluteUrl,\n\t\t\t\tcreatePhpRuntime: async () =>\n\t\t\t\t\tawait loadNodeRuntime(compiledBlueprint.versions.php),\n\t\t\t\twordPressZip,\n\t\t\t\tsqliteIntegrationPluginZip: fetchSqliteIntegration(monitor),\n\t\t\t\tsapiName: 'cli',\n\t\t\t\tcreateFiles: {\n\t\t\t\t\t'/internal/shared/ca-bundle.crt':\n\t\t\t\t\t\trootCertificates.join('\\n'),\n\t\t\t\t},\n\t\t\t\tconstants,\n\t\t\t\tphpIniEntries: {\n\t\t\t\t\t'openssl.cafile': '/internal/shared/ca-bundle.crt',\n\t\t\t\t\tallow_url_fopen: '1',\n\t\t\t\t\tdisable_functions: '',\n\t\t\t\t},\n\t\t\t\thooks: {\n\t\t\t\t\tasync beforeWordPressFiles(php) {\n\t\t\t\t\t\tif (args.mountBeforeInstall) {\n\t\t\t\t\t\t\tmountResources(php, args.mountBeforeInstall);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tlogger.log(`Booted!`);\n\n\t\t\tconst php = await requestHandler.getPrimaryPhp();\n\t\t\ttry {\n\t\t\t\tif (\n\t\t\t\t\twpDetails &&\n\t\t\t\t\t!args.mountBeforeInstall &&\n\t\t\t\t\t!fs.existsSync(preinstalledWpContentPath)\n\t\t\t\t) {\n\t\t\t\t\tlogger.log(\n\t\t\t\t\t\t`Caching preinstalled WordPress for the next boot...`\n\t\t\t\t\t);\n\t\t\t\t\tfs.writeFileSync(\n\t\t\t\t\t\tpreinstalledWpContentPath,\n\t\t\t\t\t\tawait zipDirectory(php, '/wordpress')\n\t\t\t\t\t);\n\t\t\t\t\tlogger.log(`Cached!`);\n\t\t\t\t}\n\n\t\t\t\tif (args.mount) {\n\t\t\t\t\tmountResources(php, args.mount);\n\t\t\t\t}\n\n\t\t\t\twordPressReady = true;\n\n\t\t\t\tif (compiledBlueprint) {\n\t\t\t\t\tconst { php, reap } =\n\t\t\t\t\t\tawait requestHandler.processManager.acquirePHPInstance();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlogger.log(`Running the Blueprint...`);\n\t\t\t\t\t\tawait runBlueprintSteps(compiledBlueprint, php);\n\t\t\t\t\t\tlogger.log(`Finished running the blueprint`);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\treap();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (args.command === 'build-snapshot') {\n\t\t\t\t\tawait zipSite(args.outfile as string);\n\t\t\t\t\tlogger.log(`WordPress exported to ${args.outfile}`);\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t} else if (args.command === 'run-blueprint') {\n\t\t\t\t\tlogger.log(`Blueprint executed`);\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.log(`WordPress is running on ${absoluteUrl}`);\n\t\t\t\t}\n\n\t\t\t\treturn { requestHandler, server };\n\t\t\t} catch (error) {\n\t\t\t\tif (!args.debug) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tconst phpLogs = php.readFileAsText(errorLogPath);\n\t\t\t\tthrow new Error(phpLogs, { cause: error });\n\t\t\t}\n\t\t},\n\t\tasync handleRequest(request: PHPRequest) {\n\t\t\tif (!wordPressReady) {\n\t\t\t\treturn PHPResponse.forHttpCode(\n\t\t\t\t\t502,\n\t\t\t\t\t'WordPress is not ready yet'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn await requestHandler.request(request);\n\t\t},\n\t});\n}\n"],"names":["startServer","options","app","express","server","resolve","reject","address","req","res","phpResponse","parseHeaders","bufferRequestBody","key","port","body","chunk","requestHeaders","i","CACHE_FOLDER","path","os","fetchSqliteIntegration","monitor","cachedDownload","remoteUrl","cacheKey","artifactPath","fs","downloadTo","readAsFile","localPath","reader","tmpPath","writer","done","value","err","fileName","basename","runCLI","args","logger","zipSite","outfile","php","reap","requestHandler","zip","mountResources","rawMounts","parsedMounts","mount","source","vfsPath","createNodeFsMountHandler","compileInputBlueprint","blueprint","RecommendedPHPVersion","tracker","ProgressTracker","lastCaption","progressReached100","e","progressInteger","message","writeProgressUpdate","compileBlueprint","lastProgressMessage","writeStream","finalUpdate","compiledBlueprint","wordPressReady","absoluteUrl","wpDetails","EmscriptenDownloadMonitor","loaded","total","percentProgress","resolveWordPressRelease","preinstalledWpContentPath","wordPressZip","constants","bootWordPress","loadNodeRuntime","rootCertificates","zipDirectory","runBlueprintSteps","error","phpLogs","errorLogPath","request","PHPResponse"],"mappings":"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"}