{"version":3,"file":"cli.js","sources":["../../../../packages/playground/cli/src/is-valid-wordpress-slug.ts","../../../../packages/playground/cli/src/cli.ts"],"sourcesContent":["/**\n * Checks if the given version string is a valid WordPress version.\n *\n * The Regex is based on the releases on https://wordpress.org/download/releases/#betas\n * The version string can be one of the following formats:\n * - \"latest\"\n * - \"trunk\"\n * - \"nightly\"\n * - \"x.y\" (x and y are integers) e.g. \"6.2\"\n * - \"x.y.z\" (x, y and z are integers) e.g. \"6.2.1\"\n * - \"x.y.z-betaN\" (N is an integer) e.g. \"6.2.1-beta1\"\n * - \"x.y.z-RCN\" (N is an integer) e.g. \"6.2-RC1\"\n *\n * @param version The version string to check.\n * @returns A boolean value indicating whether the version string is a valid WordPress version.\n */\nexport function isValidWordPressSlug(version: string): boolean {\n\tconst versionPattern =\n\t\t/^latest$|^trunk$|^nightly$|^(?:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)((?:-beta(?:\\d+)?)|(?:-RC(?:\\d+)?))?$/;\n\treturn versionPattern.test(version);\n}\n","import fs from 'fs';\nimport path from 'path';\nimport yargs from 'yargs';\nimport { SupportedPHPVersions } from '@php-wasm/universal';\nimport { isValidWordPressSlug } from './is-valid-wordpress-slug';\nimport { RecommendedPHPVersion } from '@wp-playground/common';\nimport { runCLI, RunCLIArgs } from './run-cli';\n\nasync function run() {\n\t/**\n\t * @TODO This looks similar to Query API args https://wordpress.github.io/wordpress-playground/developers/apis/query-api/\n\t *       Perhaps the two could be handled by the same code?\n\t */\n\tconst yargsObject = await yargs(process.argv.slice(2))\n\t\t.usage('Usage: wp-playground <command> [options]')\n\t\t.positional('command', {\n\t\t\tdescribe: 'Command to run',\n\t\t\ttype: 'string',\n\t\t\tchoices: ['server', 'run-blueprint', 'build-snapshot'],\n\t\t})\n\t\t.option('outfile', {\n\t\t\tdescribe: 'When building, write to this output file.',\n\t\t\ttype: 'string',\n\t\t\tdefault: 'wordpress.zip',\n\t\t})\n\t\t.option('port', {\n\t\t\tdescribe: 'Port to listen on when serving.',\n\t\t\ttype: 'number',\n\t\t\tdefault: 9400,\n\t\t})\n\t\t.option('php', {\n\t\t\tdescribe: 'PHP version to use.',\n\t\t\ttype: 'string',\n\t\t\tdefault: RecommendedPHPVersion,\n\t\t\tchoices: SupportedPHPVersions,\n\t\t})\n\t\t.option('wp', {\n\t\t\tdescribe: 'WordPress version to use.',\n\t\t\ttype: 'string',\n\t\t\tdefault: 'latest',\n\t\t})\n\t\t// @TODO: Support read-only mounts, e.g. via WORKERFS, a custom\n\t\t// ReadOnlyNODEFS, or by copying the files into MEMFS\n\t\t.option('mount', {\n\t\t\tdescribe:\n\t\t\t\t'Mount a directory to the PHP runtime. You can provide --mount multiple times. Format: /host/path:/vfs/path',\n\t\t\ttype: 'array',\n\t\t\tstring: true,\n\t\t})\n\t\t.option('mountBeforeInstall', {\n\t\t\tdescribe:\n\t\t\t\t'Mount a directory to the PHP runtime before installing WordPress. You can provide --mount-before-install multiple times. Format: /host/path:/vfs/path',\n\t\t\ttype: 'array',\n\t\t\tstring: true,\n\t\t})\n\t\t.option('login', {\n\t\t\tdescribe: 'Should log the user in',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t})\n\t\t.option('blueprint', {\n\t\t\tdescribe: 'Blueprint to execute.',\n\t\t\ttype: 'string',\n\t\t})\n\t\t.option('skipWordPressSetup', {\n\t\t\tdescribe:\n\t\t\t\t'Do not download, unzip, and install WordPress. Useful for mounting a pre-configured WordPress directory at /wordpress.',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t})\n\t\t.option('quiet', {\n\t\t\tdescribe: 'Do not output logs and progress messages.',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t})\n\t\t.option('debug', {\n\t\t\tdescribe:\n\t\t\t\t'Print PHP error log content if an error occurs during Playground boot.',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t})\n\t\t.showHelpOnFail(false)\n\t\t.check((args) => {\n\t\t\tif (args.wp !== undefined && !isValidWordPressSlug(args.wp)) {\n\t\t\t\ttry {\n\t\t\t\t\t// Check if is valid URL\n\t\t\t\t\tnew URL(args.wp);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Unrecognized WordPress version. Please use \"latest\", a URL, or a numeric version such as \"6.2\", \"6.0.1\", \"6.2-beta1\", or \"6.2-RC1\"'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (args.blueprint !== undefined) {\n\t\t\t\tconst blueprintPath = path.resolve(\n\t\t\t\t\tprocess.cwd(),\n\t\t\t\t\targs.blueprint\n\t\t\t\t);\n\t\t\t\tif (!fs.existsSync(blueprintPath)) {\n\t\t\t\t\tthrow new Error('Blueprint file does not exist');\n\t\t\t\t}\n\n\t\t\t\tconst content = fs.readFileSync(blueprintPath, 'utf-8');\n\t\t\t\ttry {\n\t\t\t\t\targs.blueprint = JSON.parse(content);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error('Blueprint file is not a valid JSON file');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\n\tyargsObject.wrap(yargsObject.terminalWidth());\n\tconst args = await yargsObject.argv;\n\n\tconst command = args._[0] as string;\n\n\tif (!['run-blueprint', 'server', 'build-snapshot'].includes(command)) {\n\t\tyargsObject.showHelp();\n\t\tprocess.exit(1);\n\t}\n\n\tconst cliArgs = {\n\t\t...args,\n\t\tcommand,\n\t} as RunCLIArgs;\n\n\treturn await runCLI(cliArgs);\n}\n\nrun();\n"],"names":["isValidWordPressSlug","version","run","yargsObject","yargs","RecommendedPHPVersion","SupportedPHPVersions","args","blueprintPath","path","fs","content","command","cliArgs","runCLI"],"mappings":";;;;;;;;;;;;;;;AAgBO,SAASA,EAAqBC,GAA0B;AAGvD,SADN,gGACqB,KAAKA,CAAO;AACnC;ACZA,eAAeC,IAAM;AAKpB,QAAMC,IAAc,MAAMC,EAAM,QAAQ,KAAK,MAAM,CAAC,CAAC,EACnD,MAAM,0CAA0C,EAChD,WAAW,WAAW;AAAA,IACtB,UAAU;AAAA,IACV,MAAM;AAAA,IACN,SAAS,CAAC,UAAU,iBAAiB,gBAAgB;AAAA,EAAA,CACrD,EACA,OAAO,WAAW;AAAA,IAClB,UAAU;AAAA,IACV,MAAM;AAAA,IACN,SAAS;AAAA,EAAA,CACT,EACA,OAAO,QAAQ;AAAA,IACf,UAAU;AAAA,IACV,MAAM;AAAA,IACN,SAAS;AAAA,EAAA,CACT,EACA,OAAO,OAAO;AAAA,IACd,UAAU;AAAA,IACV,MAAM;AAAA,IACN,SAASC;AAAA,IACT,SAASC;AAAA,EAAA,CACT,EACA,OAAO,MAAM;AAAA,IACb,UAAU;AAAA,IACV,MAAM;AAAA,IACN,SAAS;AAAA,EAAA,CACT,EAGA,OAAO,SAAS;AAAA,IAChB,UACC;AAAA,IACD,MAAM;AAAA,IACN,QAAQ;AAAA,EAAA,CACR,EACA,OAAO,sBAAsB;AAAA,IAC7B,UACC;AAAA,IACD,MAAM;AAAA,IACN,QAAQ;AAAA,EAAA,CACR,EACA,OAAO,SAAS;AAAA,IAChB,UAAU;AAAA,IACV,MAAM;AAAA,IACN,SAAS;AAAA,EAAA,CACT,EACA,OAAO,aAAa;AAAA,IACpB,UAAU;AAAA,IACV,MAAM;AAAA,EAAA,CACN,EACA,OAAO,sBAAsB;AAAA,IAC7B,UACC;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,EAAA,CACT,EACA,OAAO,SAAS;AAAA,IAChB,UAAU;AAAA,IACV,MAAM;AAAA,IACN,SAAS;AAAA,EAAA,CACT,EACA,OAAO,SAAS;AAAA,IAChB,UACC;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,EACT,CAAA,EACA,eAAe,EAAK,EACpB,MAAM,CAACC,MAAS;AAChB,QAAIA,EAAK,OAAO,UAAa,CAACP,EAAqBO,EAAK,EAAE;AACrD,UAAA;AAEC,YAAA,IAAIA,EAAK,EAAE;AAAA,cACJ;AACX,cAAM,IAAI;AAAA,UACT;AAAA,QAAA;AAAA,MAEF;AAEGA,QAAAA,EAAK,cAAc,QAAW;AACjC,YAAMC,IAAgBC,EAAK;AAAA,QAC1B,QAAQ,IAAI;AAAA,QACZF,EAAK;AAAA,MAAA;AAEN,UAAI,CAACG,EAAG,WAAWF,CAAa;AACzB,cAAA,IAAI,MAAM,+BAA+B;AAGhD,YAAMG,IAAUD,EAAG,aAAaF,GAAe,OAAO;AAClD,UAAA;AACHD,QAAAA,EAAK,YAAY,KAAK,MAAMI,CAAO;AAAA,cACxB;AACL,cAAA,IAAI,MAAM,yCAAyC;AAAA,MAC1D;AAAA,IACD;AACO,WAAA;AAAA,EAAA,CACP;AAEU,EAAAR,EAAA,KAAKA,EAAY,cAAe,CAAA;AACtC,QAAAI,IAAO,MAAMJ,EAAY,MAEzBS,IAAUL,EAAK,EAAE,CAAC;AAEpB,EAAC,CAAC,iBAAiB,UAAU,gBAAgB,EAAE,SAASK,CAAO,MAClET,EAAY,SAAS,GACrB,QAAQ,KAAK,CAAC;AAGf,QAAMU,IAAU;AAAA,IACf,GAAGN;AAAA,IACH,SAAAK;AAAA,EAAA;AAGM,SAAA,MAAME,EAAOD,CAAO;AAC5B;AAEAX,EAAI;"}